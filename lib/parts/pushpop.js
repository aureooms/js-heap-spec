"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.pushpop = undefined;
exports._pushpop = _pushpop;

var _tester = require("../tester");

function _pushpop(_test, heapname, Heap, diffname, diff, n) {

	var title = "Heap pushpop (" + heapname + ", " + diffname + ", " + n + ")";

	_test(title, function (t) {

		var q, a, i, x, b;

		q = Heap(diff);
		a = [];

		i = n;
		while (i--) {
			x = Math.random();
			q.push(x);
			a.push(x);
		}

		a.sort(diff);

		i = n;
		b = [];

		while (i--) {
			b.push(q.pop());
		}

		t.deepEqual(b, a, "check sorted");

		t.deepEqual(q.pop(), undefined, "2nd empty pop");

		t.deepEqual(q.length, 0, "queue empty");
	});
}

var pushpop = exports.pushpop = (0, _tester.tester)(_pushpop);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wYXJ0cy9wdXNocG9wLmpzIl0sIm5hbWVzIjpbIl9wdXNocG9wIiwiX3Rlc3QiLCJoZWFwbmFtZSIsIkhlYXAiLCJkaWZmbmFtZSIsImRpZmYiLCJuIiwidGl0bGUiLCJxIiwiYSIsImkiLCJ4IiwiYiIsIk1hdGgiLCJyYW5kb20iLCJwdXNoIiwic29ydCIsInBvcCIsInQiLCJkZWVwRXF1YWwiLCJ1bmRlZmluZWQiLCJsZW5ndGgiLCJwdXNocG9wIl0sIm1hcHBpbmdzIjoiOzs7Ozs7UUFFZ0JBLFEsR0FBQUEsUTs7QUFGaEI7O0FBRU8sU0FBU0EsUUFBVCxDQUFvQkMsS0FBcEIsRUFBMkJDLFFBQTNCLEVBQXFDQyxJQUFyQyxFQUEyQ0MsUUFBM0MsRUFBcURDLElBQXJELEVBQTJEQyxDQUEzRCxFQUErRDs7QUFFckUsS0FBTUMsMkJBQXlCTCxRQUF6QixVQUFzQ0UsUUFBdEMsVUFBbURFLENBQW5ELE1BQU47O0FBRUFMLE9BQU9NLEtBQVAsRUFBYyxhQUFLOztBQUVsQixNQUFJQyxDQUFKLEVBQU9DLENBQVAsRUFBVUMsQ0FBVixFQUFhQyxDQUFiLEVBQWdCQyxDQUFoQjs7QUFFQUosTUFBSUwsS0FBTUUsSUFBTixDQUFKO0FBQ0FJLE1BQUksRUFBSjs7QUFFQUMsTUFBSUosQ0FBSjtBQUNBLFNBQVFJLEdBQVIsRUFBYztBQUNiQyxPQUFJRSxLQUFLQyxNQUFMLEVBQUo7QUFDQU4sS0FBRU8sSUFBRixDQUFPSixDQUFQO0FBQ0FGLEtBQUVNLElBQUYsQ0FBT0osQ0FBUDtBQUNBOztBQUVERixJQUFFTyxJQUFGLENBQU9YLElBQVA7O0FBRUFLLE1BQUlKLENBQUo7QUFDQU0sTUFBSSxFQUFKOztBQUVBLFNBQVFGLEdBQVIsRUFBYztBQUNiRSxLQUFFRyxJQUFGLENBQVFQLEVBQUVTLEdBQUYsRUFBUjtBQUNBOztBQUVEQyxJQUFFQyxTQUFGLENBQWFQLENBQWIsRUFBZ0JILENBQWhCLEVBQW1CLGNBQW5COztBQUVBUyxJQUFFQyxTQUFGLENBQWFYLEVBQUVTLEdBQUYsRUFBYixFQUFzQkcsU0FBdEIsRUFBaUMsZUFBakM7O0FBRUFGLElBQUVDLFNBQUYsQ0FBYVgsRUFBRWEsTUFBZixFQUF1QixDQUF2QixFQUEwQixhQUExQjtBQUVBLEVBN0JEO0FBK0JBOztBQUVNLElBQU1DLDRCQUFVLG9CQUFRdEIsUUFBUixDQUFoQiIsImZpbGUiOiJwdXNocG9wLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdGVzdGVyIH0gZnJvbSAnLi4vdGVzdGVyJyA7XG5cbmV4cG9ydCBmdW5jdGlvbiBfcHVzaHBvcCAoIF90ZXN0LCBoZWFwbmFtZSwgSGVhcCwgZGlmZm5hbWUsIGRpZmYsIG4gKSB7XG5cblx0Y29uc3QgdGl0bGUgPSBgSGVhcCBwdXNocG9wICgke2hlYXBuYW1lfSwgJHtkaWZmbmFtZX0sICR7bn0pYDtcblxuXHRfdGVzdCggdGl0bGUsIHQgPT4ge1xuXG5cdFx0dmFyIHEsIGEsIGksIHgsIGI7XG5cblx0XHRxID0gSGVhcCggZGlmZiApO1xuXHRcdGEgPSBbXTtcblxuXHRcdGkgPSBuO1xuXHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0eCA9IE1hdGgucmFuZG9tKCk7XG5cdFx0XHRxLnB1c2goeCk7XG5cdFx0XHRhLnB1c2goeCk7XG5cdFx0fVxuXG5cdFx0YS5zb3J0KGRpZmYpO1xuXG5cdFx0aSA9IG47XG5cdFx0YiA9IFtdO1xuXG5cdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRiLnB1c2goIHEucG9wKCkgKTtcblx0XHR9XG5cblx0XHR0LmRlZXBFcXVhbCggYiwgYSwgXCJjaGVjayBzb3J0ZWRcIiApO1xuXG5cdFx0dC5kZWVwRXF1YWwoIHEucG9wKCksIHVuZGVmaW5lZCwgXCIybmQgZW1wdHkgcG9wXCIgKTtcblxuXHRcdHQuZGVlcEVxdWFsKCBxLmxlbmd0aCwgMCwgXCJxdWV1ZSBlbXB0eVwiICk7XG5cblx0fSk7XG5cbn1cblxuZXhwb3J0IGNvbnN0IHB1c2hwb3AgPSB0ZXN0ZXIoIF9wdXNocG9wICkgO1xuIl19
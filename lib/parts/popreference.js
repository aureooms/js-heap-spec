"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.popreference = undefined;
exports._popreference = _popreference;

var _tester = require("../tester");

function _popreference(_test, heapname, Heap, diffname, diff, n) {

	var title = "Heap popreference (" + heapname + ", " + diffname + ", " + n + ")";

	_test(title, function (t) {

		var q, a, i, x, b;

		q = Heap(diff);
		a = [];

		i = n;
		while (i--) {
			x = Math.random();
			q.push(x);
			a.push(x);
		}

		i = n;
		b = [];

		while (i--) {
			b.push(q.popreference().value);
		}

		a.sort(diff);

		t.deepEqual(b, a, "check sorted");

		t.deepEqual(q.popreference(), null, "2nd empty pop");

		t.deepEqual(q.length, 0, "queue empty");
	});
}

var popreference = exports.popreference = (0, _tester.tester)(_popreference);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wYXJ0cy9wb3ByZWZlcmVuY2UuanMiXSwibmFtZXMiOlsiX3BvcHJlZmVyZW5jZSIsIl90ZXN0IiwiaGVhcG5hbWUiLCJIZWFwIiwiZGlmZm5hbWUiLCJkaWZmIiwibiIsInRpdGxlIiwicSIsImEiLCJpIiwieCIsImIiLCJNYXRoIiwicmFuZG9tIiwicHVzaCIsInBvcHJlZmVyZW5jZSIsInZhbHVlIiwic29ydCIsInQiLCJkZWVwRXF1YWwiLCJsZW5ndGgiXSwibWFwcGluZ3MiOiI7Ozs7OztRQUVnQkEsYSxHQUFBQSxhOztBQUZoQjs7QUFFTyxTQUFTQSxhQUFULENBQXlCQyxLQUF6QixFQUFnQ0MsUUFBaEMsRUFBMENDLElBQTFDLEVBQWdEQyxRQUFoRCxFQUEwREMsSUFBMUQsRUFBZ0VDLENBQWhFLEVBQW9FOztBQUUxRSxLQUFNQyxnQ0FBOEJMLFFBQTlCLFVBQTJDRSxRQUEzQyxVQUF3REUsQ0FBeEQsTUFBTjs7QUFFQUwsT0FBT00sS0FBUCxFQUFjLGFBQUs7O0FBRWxCLE1BQUlDLENBQUosRUFBT0MsQ0FBUCxFQUFVQyxDQUFWLEVBQWFDLENBQWIsRUFBZ0JDLENBQWhCOztBQUVBSixNQUFJTCxLQUFNRSxJQUFOLENBQUo7QUFDQUksTUFBSSxFQUFKOztBQUVBQyxNQUFJSixDQUFKO0FBQ0EsU0FBUUksR0FBUixFQUFjO0FBQ2JDLE9BQUlFLEtBQUtDLE1BQUwsRUFBSjtBQUNBTixLQUFFTyxJQUFGLENBQU9KLENBQVA7QUFDQUYsS0FBRU0sSUFBRixDQUFPSixDQUFQO0FBQ0E7O0FBRURELE1BQUlKLENBQUo7QUFDQU0sTUFBSSxFQUFKOztBQUVBLFNBQVFGLEdBQVIsRUFBYztBQUNiRSxLQUFFRyxJQUFGLENBQVFQLEVBQUVRLFlBQUYsR0FBaUJDLEtBQXpCO0FBQ0E7O0FBRURSLElBQUVTLElBQUYsQ0FBT2IsSUFBUDs7QUFFQWMsSUFBRUMsU0FBRixDQUFhUixDQUFiLEVBQWdCSCxDQUFoQixFQUFtQixjQUFuQjs7QUFFQVUsSUFBRUMsU0FBRixDQUFhWixFQUFFUSxZQUFGLEVBQWIsRUFBK0IsSUFBL0IsRUFBcUMsZUFBckM7O0FBRUFHLElBQUVDLFNBQUYsQ0FBYVosRUFBRWEsTUFBZixFQUF1QixDQUF2QixFQUEwQixhQUExQjtBQUVBLEVBN0JEO0FBK0JBOztBQUVNLElBQU1MLHNDQUFlLG9CQUFRaEIsYUFBUixDQUFyQiIsImZpbGUiOiJwb3ByZWZlcmVuY2UuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB0ZXN0ZXIgfSBmcm9tICcuLi90ZXN0ZXInIDtcblxuZXhwb3J0IGZ1bmN0aW9uIF9wb3ByZWZlcmVuY2UgKCBfdGVzdCwgaGVhcG5hbWUsIEhlYXAsIGRpZmZuYW1lLCBkaWZmLCBuICkge1xuXG5cdGNvbnN0IHRpdGxlID0gYEhlYXAgcG9wcmVmZXJlbmNlICgke2hlYXBuYW1lfSwgJHtkaWZmbmFtZX0sICR7bn0pYDtcblxuXHRfdGVzdCggdGl0bGUsIHQgPT4ge1xuXG5cdFx0dmFyIHEsIGEsIGksIHgsIGI7XG5cblx0XHRxID0gSGVhcCggZGlmZiApO1xuXHRcdGEgPSBbXTtcblxuXHRcdGkgPSBuO1xuXHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0eCA9IE1hdGgucmFuZG9tKCk7XG5cdFx0XHRxLnB1c2goeCk7XG5cdFx0XHRhLnB1c2goeCk7XG5cdFx0fVxuXG5cdFx0aSA9IG47XG5cdFx0YiA9IFtdO1xuXG5cdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRiLnB1c2goIHEucG9wcmVmZXJlbmNlKCkudmFsdWUgKTtcblx0XHR9XG5cblx0XHRhLnNvcnQoZGlmZik7XG5cblx0XHR0LmRlZXBFcXVhbCggYiwgYSwgXCJjaGVjayBzb3J0ZWRcIiApO1xuXG5cdFx0dC5kZWVwRXF1YWwoIHEucG9wcmVmZXJlbmNlKCksIG51bGwsIFwiMm5kIGVtcHR5IHBvcFwiICk7XG5cblx0XHR0LmRlZXBFcXVhbCggcS5sZW5ndGgsIDAsIFwicXVldWUgZW1wdHlcIiApO1xuXG5cdH0pO1xuXG59XG5cbmV4cG9ydCBjb25zdCBwb3ByZWZlcmVuY2UgPSB0ZXN0ZXIoIF9wb3ByZWZlcmVuY2UgKSA7XG4iXX0=
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.pushreference = undefined;
exports._pushreference = _pushreference;

var _tester = require('../tester');

var _aureoomsJsRandom = require('aureooms-js-random');

function _pushreference(_test, heapname, Heap, diffname, diff, n) {

	var title = 'Heap pushreference (' + heapname + ', ' + diffname + ', ' + n + ')';

	_test(title, function (t) {

		var q, a, i, x, b;

		q = Heap(diff);
		a = [];

		if (length) t.deepEqual(q.length, 0, "check length zero");

		i = n;
		while (i--) {
			x = Math.random();
			q.push(x);
			a.push(x);
			if (length) t.deepEqual(q.length, a.length);
		}

		b = [];

		i = n;
		while (i--) {
			b.push(q.popreference());
			if (length) t.deepEqual(q.length, i);
		}

		(0, _aureoomsJsRandom.shuffle)(b, 0, n);

		i = n;
		while (i--) {
			q.pushreference(b.pop());
			if (length) t.deepEqual(q.length, n - b.length);
		}

		i = n;
		while (i--) {
			b.push(q.popreference().value);
			if (length) t.deepEqual(q.length, i);
		}

		a.sort(diff);

		t.deepEqual(b, a, "check sorted");

		t.deepEqual(q.popreference(), null, "2nd empty pop");

		if (length) t.deepEqual(q.length, 0, "check length zero");
	});
}

var pushreference = exports.pushreference = (0, _tester.tester)(_pushreference);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wYXJ0cy9wdXNocmVmZXJlbmNlLmpzIl0sIm5hbWVzIjpbIl9wdXNocmVmZXJlbmNlIiwiX3Rlc3QiLCJoZWFwbmFtZSIsIkhlYXAiLCJkaWZmbmFtZSIsImRpZmYiLCJuIiwidGl0bGUiLCJxIiwiYSIsImkiLCJ4IiwiYiIsImxlbmd0aCIsInQiLCJkZWVwRXF1YWwiLCJNYXRoIiwicmFuZG9tIiwicHVzaCIsInBvcHJlZmVyZW5jZSIsInB1c2hyZWZlcmVuY2UiLCJwb3AiLCJ2YWx1ZSIsInNvcnQiXSwibWFwcGluZ3MiOiI7Ozs7OztRQUdnQkEsYyxHQUFBQSxjOztBQUhoQjs7QUFDQTs7QUFFTyxTQUFTQSxjQUFULENBQTBCQyxLQUExQixFQUFpQ0MsUUFBakMsRUFBMkNDLElBQTNDLEVBQWlEQyxRQUFqRCxFQUEyREMsSUFBM0QsRUFBaUVDLENBQWpFLEVBQXFFOztBQUUzRSxLQUFNQyxpQ0FBK0JMLFFBQS9CLFVBQTRDRSxRQUE1QyxVQUF5REUsQ0FBekQsTUFBTjs7QUFFQUwsT0FBT00sS0FBUCxFQUFjLGFBQUs7O0FBRWxCLE1BQUlDLENBQUosRUFBT0MsQ0FBUCxFQUFVQyxDQUFWLEVBQWFDLENBQWIsRUFBZ0JDLENBQWhCOztBQUVBSixNQUFJTCxLQUFNRSxJQUFOLENBQUo7QUFDQUksTUFBSSxFQUFKOztBQUVBLE1BQUlJLE1BQUosRUFBWUMsRUFBRUMsU0FBRixDQUFhUCxFQUFFSyxNQUFmLEVBQXVCLENBQXZCLEVBQTBCLG1CQUExQjs7QUFFWkgsTUFBSUosQ0FBSjtBQUNBLFNBQVFJLEdBQVIsRUFBYztBQUNiQyxPQUFJSyxLQUFLQyxNQUFMLEVBQUo7QUFDQVQsS0FBRVUsSUFBRixDQUFPUCxDQUFQO0FBQ0FGLEtBQUVTLElBQUYsQ0FBT1AsQ0FBUDtBQUNBLE9BQUlFLE1BQUosRUFBWUMsRUFBRUMsU0FBRixDQUFhUCxFQUFFSyxNQUFmLEVBQXVCSixFQUFFSSxNQUF6QjtBQUNaOztBQUVERCxNQUFJLEVBQUo7O0FBRUFGLE1BQUlKLENBQUo7QUFDQSxTQUFRSSxHQUFSLEVBQWM7QUFDYkUsS0FBRU0sSUFBRixDQUFRVixFQUFFVyxZQUFGLEVBQVI7QUFDQSxPQUFJTixNQUFKLEVBQVlDLEVBQUVDLFNBQUYsQ0FBYVAsRUFBRUssTUFBZixFQUF1QkgsQ0FBdkI7QUFDWjs7QUFFRCxpQ0FBU0UsQ0FBVCxFQUFZLENBQVosRUFBZU4sQ0FBZjs7QUFFQUksTUFBSUosQ0FBSjtBQUNBLFNBQVFJLEdBQVIsRUFBYztBQUNiRixLQUFFWSxhQUFGLENBQWlCUixFQUFFUyxHQUFGLEVBQWpCO0FBQ0EsT0FBSVIsTUFBSixFQUFZQyxFQUFFQyxTQUFGLENBQWFQLEVBQUVLLE1BQWYsRUFBdUJQLElBQUlNLEVBQUVDLE1BQTdCO0FBQ1o7O0FBRURILE1BQUlKLENBQUo7QUFDQSxTQUFRSSxHQUFSLEVBQWM7QUFDYkUsS0FBRU0sSUFBRixDQUFRVixFQUFFVyxZQUFGLEdBQWlCRyxLQUF6QjtBQUNBLE9BQUlULE1BQUosRUFBWUMsRUFBRUMsU0FBRixDQUFhUCxFQUFFSyxNQUFmLEVBQXVCSCxDQUF2QjtBQUNaOztBQUVERCxJQUFFYyxJQUFGLENBQU9sQixJQUFQOztBQUVBUyxJQUFFQyxTQUFGLENBQWFILENBQWIsRUFBZ0JILENBQWhCLEVBQW1CLGNBQW5COztBQUVBSyxJQUFFQyxTQUFGLENBQWFQLEVBQUVXLFlBQUYsRUFBYixFQUErQixJQUEvQixFQUFxQyxlQUFyQzs7QUFFQSxNQUFJTixNQUFKLEVBQVlDLEVBQUVDLFNBQUYsQ0FBYVAsRUFBRUssTUFBZixFQUF1QixDQUF2QixFQUEwQixtQkFBMUI7QUFFWixFQS9DRDtBQWlEQTs7QUFFTSxJQUFNTyx3Q0FBZ0Isb0JBQVFwQixjQUFSLENBQXRCIiwiZmlsZSI6InB1c2hyZWZlcmVuY2UuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB0ZXN0ZXIgfSBmcm9tICcuLi90ZXN0ZXInIDtcbmltcG9ydCB7IHNodWZmbGUgfSBmcm9tICdhdXJlb29tcy1qcy1yYW5kb20nIDtcblxuZXhwb3J0IGZ1bmN0aW9uIF9wdXNocmVmZXJlbmNlICggX3Rlc3QsIGhlYXBuYW1lLCBIZWFwLCBkaWZmbmFtZSwgZGlmZiwgbiApIHtcblxuXHRjb25zdCB0aXRsZSA9IGBIZWFwIHB1c2hyZWZlcmVuY2UgKCR7aGVhcG5hbWV9LCAke2RpZmZuYW1lfSwgJHtufSlgO1xuXG5cdF90ZXN0KCB0aXRsZSwgdCA9PiB7XG5cblx0XHR2YXIgcSwgYSwgaSwgeCwgYjtcblxuXHRcdHEgPSBIZWFwKCBkaWZmICk7XG5cdFx0YSA9IFtdO1xuXG5cdFx0aWYgKGxlbmd0aCkgdC5kZWVwRXF1YWwoIHEubGVuZ3RoLCAwLCBcImNoZWNrIGxlbmd0aCB6ZXJvXCIpO1xuXG5cdFx0aSA9IG47XG5cdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHR4ID0gTWF0aC5yYW5kb20oKTtcblx0XHRcdHEucHVzaCh4KTtcblx0XHRcdGEucHVzaCh4KTtcblx0XHRcdGlmIChsZW5ndGgpIHQuZGVlcEVxdWFsKCBxLmxlbmd0aCwgYS5sZW5ndGgpO1xuXHRcdH1cblxuXHRcdGIgPSBbXTtcblxuXHRcdGkgPSBuO1xuXHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0Yi5wdXNoKCBxLnBvcHJlZmVyZW5jZSgpICk7XG5cdFx0XHRpZiAobGVuZ3RoKSB0LmRlZXBFcXVhbCggcS5sZW5ndGgsIGkpO1xuXHRcdH1cblxuXHRcdHNodWZmbGUoIGIsIDAsIG4gKTtcblxuXHRcdGkgPSBuO1xuXHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0cS5wdXNocmVmZXJlbmNlKCBiLnBvcCgpICk7XG5cdFx0XHRpZiAobGVuZ3RoKSB0LmRlZXBFcXVhbCggcS5sZW5ndGgsIG4gLSBiLmxlbmd0aCk7XG5cdFx0fVxuXG5cdFx0aSA9IG47XG5cdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRiLnB1c2goIHEucG9wcmVmZXJlbmNlKCkudmFsdWUgKTtcblx0XHRcdGlmIChsZW5ndGgpIHQuZGVlcEVxdWFsKCBxLmxlbmd0aCwgaSk7XG5cdFx0fVxuXG5cdFx0YS5zb3J0KGRpZmYpO1xuXG5cdFx0dC5kZWVwRXF1YWwoIGIsIGEsIFwiY2hlY2sgc29ydGVkXCIgKTtcblxuXHRcdHQuZGVlcEVxdWFsKCBxLnBvcHJlZmVyZW5jZSgpLCBudWxsLCBcIjJuZCBlbXB0eSBwb3BcIiApO1xuXG5cdFx0aWYgKGxlbmd0aCkgdC5kZWVwRXF1YWwoIHEubGVuZ3RoLCAwLCBcImNoZWNrIGxlbmd0aCB6ZXJvXCIgKTtcblxuXHR9KTtcblxufVxuXG5leHBvcnQgY29uc3QgcHVzaHJlZmVyZW5jZSA9IHRlc3RlciggX3B1c2hyZWZlcmVuY2UgKSA7XG4iXX0=
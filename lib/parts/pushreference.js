'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.pushreference = undefined;
exports._pushreference = _pushreference;

var _tester = require('../tester');

var _aureoomsJsRandom = require('aureooms-js-random');

function _pushreference(_test, length, heapname, Heap, diffname, diff, n) {

	var title = 'Heap pushreference (' + heapname + ', ' + diffname + ', ' + n + ')';

	_test(title, function (t) {

		var q, a, i, x, b;

		q = Heap(diff);
		a = [];

		if (length) t.deepEqual(q.length, 0, "check length zero");

		i = n;
		while (i--) {
			x = Math.random();
			q.push(x);
			a.push(x);
			if (length) t.deepEqual(q.length, a.length);
		}

		b = [];

		i = n;
		while (i--) {
			b.push(q.popreference());
			if (length) t.deepEqual(q.length, i);
		}

		(0, _aureoomsJsRandom.shuffle)(b, 0, n);

		i = n;
		while (i--) {
			q.pushreference(b.pop());
			if (length) t.deepEqual(q.length, n - b.length);
		}

		i = n;
		while (i--) {
			b.push(q.popreference().value);
			if (length) t.deepEqual(q.length, i);
		}

		a.sort(diff);

		t.deepEqual(b, a, "check sorted");

		t.deepEqual(q.popreference(), null, "2nd empty pop");

		if (length) t.deepEqual(q.length, 0, "check length zero");
	});
}

var pushreference = exports.pushreference = (0, _tester.tester)(_pushreference);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wYXJ0cy9wdXNocmVmZXJlbmNlLmpzIl0sIm5hbWVzIjpbIl9wdXNocmVmZXJlbmNlIiwiX3Rlc3QiLCJsZW5ndGgiLCJoZWFwbmFtZSIsIkhlYXAiLCJkaWZmbmFtZSIsImRpZmYiLCJuIiwidGl0bGUiLCJxIiwiYSIsImkiLCJ4IiwiYiIsInQiLCJkZWVwRXF1YWwiLCJNYXRoIiwicmFuZG9tIiwicHVzaCIsInBvcHJlZmVyZW5jZSIsInB1c2hyZWZlcmVuY2UiLCJwb3AiLCJ2YWx1ZSIsInNvcnQiXSwibWFwcGluZ3MiOiI7Ozs7OztRQUdnQkEsYyxHQUFBQSxjOztBQUhoQjs7QUFDQTs7QUFFTyxTQUFTQSxjQUFULENBQTBCQyxLQUExQixFQUFpQ0MsTUFBakMsRUFBeUNDLFFBQXpDLEVBQW1EQyxJQUFuRCxFQUF5REMsUUFBekQsRUFBbUVDLElBQW5FLEVBQXlFQyxDQUF6RSxFQUE2RTs7QUFFbkYsS0FBTUMsaUNBQStCTCxRQUEvQixVQUE0Q0UsUUFBNUMsVUFBeURFLENBQXpELE1BQU47O0FBRUFOLE9BQU9PLEtBQVAsRUFBYyxhQUFLOztBQUVsQixNQUFJQyxDQUFKLEVBQU9DLENBQVAsRUFBVUMsQ0FBVixFQUFhQyxDQUFiLEVBQWdCQyxDQUFoQjs7QUFFQUosTUFBSUwsS0FBTUUsSUFBTixDQUFKO0FBQ0FJLE1BQUksRUFBSjs7QUFFQSxNQUFJUixNQUFKLEVBQVlZLEVBQUVDLFNBQUYsQ0FBYU4sRUFBRVAsTUFBZixFQUF1QixDQUF2QixFQUEwQixtQkFBMUI7O0FBRVpTLE1BQUlKLENBQUo7QUFDQSxTQUFRSSxHQUFSLEVBQWM7QUFDYkMsT0FBSUksS0FBS0MsTUFBTCxFQUFKO0FBQ0FSLEtBQUVTLElBQUYsQ0FBT04sQ0FBUDtBQUNBRixLQUFFUSxJQUFGLENBQU9OLENBQVA7QUFDQSxPQUFJVixNQUFKLEVBQVlZLEVBQUVDLFNBQUYsQ0FBYU4sRUFBRVAsTUFBZixFQUF1QlEsRUFBRVIsTUFBekI7QUFDWjs7QUFFRFcsTUFBSSxFQUFKOztBQUVBRixNQUFJSixDQUFKO0FBQ0EsU0FBUUksR0FBUixFQUFjO0FBQ2JFLEtBQUVLLElBQUYsQ0FBUVQsRUFBRVUsWUFBRixFQUFSO0FBQ0EsT0FBSWpCLE1BQUosRUFBWVksRUFBRUMsU0FBRixDQUFhTixFQUFFUCxNQUFmLEVBQXVCUyxDQUF2QjtBQUNaOztBQUVELGlDQUFTRSxDQUFULEVBQVksQ0FBWixFQUFlTixDQUFmOztBQUVBSSxNQUFJSixDQUFKO0FBQ0EsU0FBUUksR0FBUixFQUFjO0FBQ2JGLEtBQUVXLGFBQUYsQ0FBaUJQLEVBQUVRLEdBQUYsRUFBakI7QUFDQSxPQUFJbkIsTUFBSixFQUFZWSxFQUFFQyxTQUFGLENBQWFOLEVBQUVQLE1BQWYsRUFBdUJLLElBQUlNLEVBQUVYLE1BQTdCO0FBQ1o7O0FBRURTLE1BQUlKLENBQUo7QUFDQSxTQUFRSSxHQUFSLEVBQWM7QUFDYkUsS0FBRUssSUFBRixDQUFRVCxFQUFFVSxZQUFGLEdBQWlCRyxLQUF6QjtBQUNBLE9BQUlwQixNQUFKLEVBQVlZLEVBQUVDLFNBQUYsQ0FBYU4sRUFBRVAsTUFBZixFQUF1QlMsQ0FBdkI7QUFDWjs7QUFFREQsSUFBRWEsSUFBRixDQUFPakIsSUFBUDs7QUFFQVEsSUFBRUMsU0FBRixDQUFhRixDQUFiLEVBQWdCSCxDQUFoQixFQUFtQixjQUFuQjs7QUFFQUksSUFBRUMsU0FBRixDQUFhTixFQUFFVSxZQUFGLEVBQWIsRUFBK0IsSUFBL0IsRUFBcUMsZUFBckM7O0FBRUEsTUFBSWpCLE1BQUosRUFBWVksRUFBRUMsU0FBRixDQUFhTixFQUFFUCxNQUFmLEVBQXVCLENBQXZCLEVBQTBCLG1CQUExQjtBQUVaLEVBL0NEO0FBaURBOztBQUVNLElBQU1rQix3Q0FBZ0Isb0JBQVFwQixjQUFSLENBQXRCIiwiZmlsZSI6InB1c2hyZWZlcmVuY2UuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB0ZXN0ZXIgfSBmcm9tICcuLi90ZXN0ZXInIDtcbmltcG9ydCB7IHNodWZmbGUgfSBmcm9tICdhdXJlb29tcy1qcy1yYW5kb20nIDtcblxuZXhwb3J0IGZ1bmN0aW9uIF9wdXNocmVmZXJlbmNlICggX3Rlc3QsIGxlbmd0aCwgaGVhcG5hbWUsIEhlYXAsIGRpZmZuYW1lLCBkaWZmLCBuICkge1xuXG5cdGNvbnN0IHRpdGxlID0gYEhlYXAgcHVzaHJlZmVyZW5jZSAoJHtoZWFwbmFtZX0sICR7ZGlmZm5hbWV9LCAke259KWA7XG5cblx0X3Rlc3QoIHRpdGxlLCB0ID0+IHtcblxuXHRcdHZhciBxLCBhLCBpLCB4LCBiO1xuXG5cdFx0cSA9IEhlYXAoIGRpZmYgKTtcblx0XHRhID0gW107XG5cblx0XHRpZiAobGVuZ3RoKSB0LmRlZXBFcXVhbCggcS5sZW5ndGgsIDAsIFwiY2hlY2sgbGVuZ3RoIHplcm9cIik7XG5cblx0XHRpID0gbjtcblx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdHggPSBNYXRoLnJhbmRvbSgpO1xuXHRcdFx0cS5wdXNoKHgpO1xuXHRcdFx0YS5wdXNoKHgpO1xuXHRcdFx0aWYgKGxlbmd0aCkgdC5kZWVwRXF1YWwoIHEubGVuZ3RoLCBhLmxlbmd0aCk7XG5cdFx0fVxuXG5cdFx0YiA9IFtdO1xuXG5cdFx0aSA9IG47XG5cdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRiLnB1c2goIHEucG9wcmVmZXJlbmNlKCkgKTtcblx0XHRcdGlmIChsZW5ndGgpIHQuZGVlcEVxdWFsKCBxLmxlbmd0aCwgaSk7XG5cdFx0fVxuXG5cdFx0c2h1ZmZsZSggYiwgMCwgbiApO1xuXG5cdFx0aSA9IG47XG5cdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRxLnB1c2hyZWZlcmVuY2UoIGIucG9wKCkgKTtcblx0XHRcdGlmIChsZW5ndGgpIHQuZGVlcEVxdWFsKCBxLmxlbmd0aCwgbiAtIGIubGVuZ3RoKTtcblx0XHR9XG5cblx0XHRpID0gbjtcblx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdGIucHVzaCggcS5wb3ByZWZlcmVuY2UoKS52YWx1ZSApO1xuXHRcdFx0aWYgKGxlbmd0aCkgdC5kZWVwRXF1YWwoIHEubGVuZ3RoLCBpKTtcblx0XHR9XG5cblx0XHRhLnNvcnQoZGlmZik7XG5cblx0XHR0LmRlZXBFcXVhbCggYiwgYSwgXCJjaGVjayBzb3J0ZWRcIiApO1xuXG5cdFx0dC5kZWVwRXF1YWwoIHEucG9wcmVmZXJlbmNlKCksIG51bGwsIFwiMm5kIGVtcHR5IHBvcFwiICk7XG5cblx0XHRpZiAobGVuZ3RoKSB0LmRlZXBFcXVhbCggcS5sZW5ndGgsIDAsIFwiY2hlY2sgbGVuZ3RoIHplcm9cIiApO1xuXG5cdH0pO1xuXG59XG5cbmV4cG9ydCBjb25zdCBwdXNocmVmZXJlbmNlID0gdGVzdGVyKCBfcHVzaHJlZmVyZW5jZSApIDtcbiJdfQ==
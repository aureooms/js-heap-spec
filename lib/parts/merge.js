"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.merge = undefined;
exports._merge = _merge;

var _tester = require("../tester");

function _merge(_test, length, heapname, Heap, diffname, diff, m, n) {

	var title = "Heap merge (" + heapname + ", " + diffname + ", " + m + ", " + n + ")";

	_test(title, function (t) {

		var q, q1, q2, a, x, i, b;

		a = [];
		q = Heap(diff);
		q1 = Heap(diff);
		q2 = Heap(diff);

		if (length) t.deepEqual(q1.length, 0, "check length zero q1");
		if (length) t.deepEqual(q2.length, 0, "check length zero q2");

		t.deepEqual(q.pop(), undefined, "1st empty pop");

		i = m;
		while (i--) {
			x = Math.random();
			q1.push(x);
			a.push(x);
			if (length) t.deepEqual(q1.length, a.length);
		}

		i = n;
		while (i--) {
			x = Math.random();
			q2.push(x);
			a.push(x);
			if (length) t.deepEqual(q2.length, a.length - m);
		}

		a.sort(diff);

		q.merge(q1);
		q.merge(q2);

		i = m + n;
		b = [];

		if (length) t.deepEqual(q.length, i);

		while (i--) {
			b.push(q.pop());
			if (length) t.deepEqual(q.length, i);
		}

		t.deepEqual(b, a, "check sorted");

		t.deepEqual(q.pop(), undefined, "2nd empty pop");

		if (length) t.deepEqual(q.length, 0, "check length zero q");
	});
}

var merge = exports.merge = (0, _tester.tester2)(_merge);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wYXJ0cy9tZXJnZS5qcyJdLCJuYW1lcyI6WyJfbWVyZ2UiLCJfdGVzdCIsImxlbmd0aCIsImhlYXBuYW1lIiwiSGVhcCIsImRpZmZuYW1lIiwiZGlmZiIsIm0iLCJuIiwidGl0bGUiLCJxIiwicTEiLCJxMiIsImEiLCJ4IiwiaSIsImIiLCJ0IiwiZGVlcEVxdWFsIiwicG9wIiwidW5kZWZpbmVkIiwiTWF0aCIsInJhbmRvbSIsInB1c2giLCJzb3J0IiwibWVyZ2UiXSwibWFwcGluZ3MiOiI7Ozs7OztRQUVnQkEsTSxHQUFBQSxNOztBQUZoQjs7QUFFTyxTQUFTQSxNQUFULENBQWtCQyxLQUFsQixFQUF5QkMsTUFBekIsRUFBaUNDLFFBQWpDLEVBQTJDQyxJQUEzQyxFQUFpREMsUUFBakQsRUFBMkRDLElBQTNELEVBQWlFQyxDQUFqRSxFQUFvRUMsQ0FBcEUsRUFBd0U7O0FBRTlFLEtBQU1DLHlCQUF1Qk4sUUFBdkIsVUFBb0NFLFFBQXBDLFVBQWlERSxDQUFqRCxVQUF1REMsQ0FBdkQsTUFBTjs7QUFFQVAsT0FBT1EsS0FBUCxFQUFjLGFBQUs7O0FBRWxCLE1BQUlDLENBQUosRUFBT0MsRUFBUCxFQUFXQyxFQUFYLEVBQWVDLENBQWYsRUFBa0JDLENBQWxCLEVBQXFCQyxDQUFyQixFQUF3QkMsQ0FBeEI7O0FBRUFILE1BQUksRUFBSjtBQUNBSCxNQUFJTixLQUFNRSxJQUFOLENBQUo7QUFDQUssT0FBS1AsS0FBTUUsSUFBTixDQUFMO0FBQ0FNLE9BQUtSLEtBQU1FLElBQU4sQ0FBTDs7QUFFQSxNQUFJSixNQUFKLEVBQVllLEVBQUVDLFNBQUYsQ0FBYVAsR0FBR1QsTUFBaEIsRUFBd0IsQ0FBeEIsRUFBMkIsc0JBQTNCO0FBQ1osTUFBSUEsTUFBSixFQUFZZSxFQUFFQyxTQUFGLENBQWFOLEdBQUdWLE1BQWhCLEVBQXdCLENBQXhCLEVBQTJCLHNCQUEzQjs7QUFFWmUsSUFBRUMsU0FBRixDQUFhUixFQUFFUyxHQUFGLEVBQWIsRUFBc0JDLFNBQXRCLEVBQWlDLGVBQWpDOztBQUVBTCxNQUFJUixDQUFKO0FBQ0EsU0FBUVEsR0FBUixFQUFjO0FBQ2JELE9BQUlPLEtBQUtDLE1BQUwsRUFBSjtBQUNBWCxNQUFHWSxJQUFILENBQVFULENBQVI7QUFDQUQsS0FBRVUsSUFBRixDQUFPVCxDQUFQO0FBQ0EsT0FBSVosTUFBSixFQUFZZSxFQUFFQyxTQUFGLENBQWFQLEdBQUdULE1BQWhCLEVBQXdCVyxFQUFFWCxNQUExQjtBQUNaOztBQUVEYSxNQUFJUCxDQUFKO0FBQ0EsU0FBUU8sR0FBUixFQUFjO0FBQ2JELE9BQUlPLEtBQUtDLE1BQUwsRUFBSjtBQUNBVixNQUFHVyxJQUFILENBQVFULENBQVI7QUFDQUQsS0FBRVUsSUFBRixDQUFPVCxDQUFQO0FBQ0EsT0FBSVosTUFBSixFQUFZZSxFQUFFQyxTQUFGLENBQWFOLEdBQUdWLE1BQWhCLEVBQXdCVyxFQUFFWCxNQUFGLEdBQVdLLENBQW5DO0FBQ1o7O0FBRURNLElBQUVXLElBQUYsQ0FBUWxCLElBQVI7O0FBRUFJLElBQUVlLEtBQUYsQ0FBU2QsRUFBVDtBQUNBRCxJQUFFZSxLQUFGLENBQVNiLEVBQVQ7O0FBRUFHLE1BQUlSLElBQUlDLENBQVI7QUFDQVEsTUFBSSxFQUFKOztBQUVBLE1BQUlkLE1BQUosRUFBWWUsRUFBRUMsU0FBRixDQUFhUixFQUFFUixNQUFmLEVBQXVCYSxDQUF2Qjs7QUFFWixTQUFRQSxHQUFSLEVBQWM7QUFDYkMsS0FBRU8sSUFBRixDQUFRYixFQUFFUyxHQUFGLEVBQVI7QUFDQSxPQUFJakIsTUFBSixFQUFZZSxFQUFFQyxTQUFGLENBQWFSLEVBQUVSLE1BQWYsRUFBdUJhLENBQXZCO0FBQ1o7O0FBRURFLElBQUVDLFNBQUYsQ0FBYUYsQ0FBYixFQUFnQkgsQ0FBaEIsRUFBbUIsY0FBbkI7O0FBRUFJLElBQUVDLFNBQUYsQ0FBYVIsRUFBRVMsR0FBRixFQUFiLEVBQXNCQyxTQUF0QixFQUFpQyxlQUFqQzs7QUFFQSxNQUFJbEIsTUFBSixFQUFZZSxFQUFFQyxTQUFGLENBQWFSLEVBQUVSLE1BQWYsRUFBdUIsQ0FBdkIsRUFBMEIscUJBQTFCO0FBRVosRUFuREQ7QUFxREE7O0FBRU0sSUFBTXVCLHdCQUFRLHFCQUFTekIsTUFBVCxDQUFkIiwiZmlsZSI6Im1lcmdlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdGVzdGVyMiB9IGZyb20gJy4uL3Rlc3RlcicgO1xuXG5leHBvcnQgZnVuY3Rpb24gX21lcmdlICggX3Rlc3QsIGxlbmd0aCwgaGVhcG5hbWUsIEhlYXAsIGRpZmZuYW1lLCBkaWZmLCBtLCBuICkge1xuXG5cdGNvbnN0IHRpdGxlID0gYEhlYXAgbWVyZ2UgKCR7aGVhcG5hbWV9LCAke2RpZmZuYW1lfSwgJHttfSwgJHtufSlgO1xuXG5cdF90ZXN0KCB0aXRsZSwgdCA9PiB7XG5cblx0XHR2YXIgcSwgcTEsIHEyLCBhLCB4LCBpLCBiO1xuXG5cdFx0YSA9IFtdO1xuXHRcdHEgPSBIZWFwKCBkaWZmICk7XG5cdFx0cTEgPSBIZWFwKCBkaWZmICk7XG5cdFx0cTIgPSBIZWFwKCBkaWZmICk7XG5cblx0XHRpZiAobGVuZ3RoKSB0LmRlZXBFcXVhbCggcTEubGVuZ3RoLCAwLCBcImNoZWNrIGxlbmd0aCB6ZXJvIHExXCIgKTtcblx0XHRpZiAobGVuZ3RoKSB0LmRlZXBFcXVhbCggcTIubGVuZ3RoLCAwLCBcImNoZWNrIGxlbmd0aCB6ZXJvIHEyXCIgKTtcblxuXHRcdHQuZGVlcEVxdWFsKCBxLnBvcCgpLCB1bmRlZmluZWQsIFwiMXN0IGVtcHR5IHBvcFwiICk7XG5cblx0XHRpID0gbTtcblx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdHggPSBNYXRoLnJhbmRvbSgpO1xuXHRcdFx0cTEucHVzaCh4KTtcblx0XHRcdGEucHVzaCh4KTtcblx0XHRcdGlmIChsZW5ndGgpIHQuZGVlcEVxdWFsKCBxMS5sZW5ndGgsIGEubGVuZ3RoICk7XG5cdFx0fVxuXG5cdFx0aSA9IG47XG5cdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHR4ID0gTWF0aC5yYW5kb20oKTtcblx0XHRcdHEyLnB1c2goeCk7XG5cdFx0XHRhLnB1c2goeCk7XG5cdFx0XHRpZiAobGVuZ3RoKSB0LmRlZXBFcXVhbCggcTIubGVuZ3RoLCBhLmxlbmd0aCAtIG0gKTtcblx0XHR9XG5cblx0XHRhLnNvcnQoIGRpZmYgKTtcblxuXHRcdHEubWVyZ2UoIHExICk7XG5cdFx0cS5tZXJnZSggcTIgKTtcblxuXHRcdGkgPSBtICsgbjtcblx0XHRiID0gW107XG5cblx0XHRpZiAobGVuZ3RoKSB0LmRlZXBFcXVhbCggcS5sZW5ndGgsIGkgKTtcblxuXHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0Yi5wdXNoKCBxLnBvcCgpICk7XG5cdFx0XHRpZiAobGVuZ3RoKSB0LmRlZXBFcXVhbCggcS5sZW5ndGgsIGkgKTtcblx0XHR9XG5cblx0XHR0LmRlZXBFcXVhbCggYiwgYSwgXCJjaGVjayBzb3J0ZWRcIiApO1xuXG5cdFx0dC5kZWVwRXF1YWwoIHEucG9wKCksIHVuZGVmaW5lZCwgXCIybmQgZW1wdHkgcG9wXCIgKTtcblxuXHRcdGlmIChsZW5ndGgpIHQuZGVlcEVxdWFsKCBxLmxlbmd0aCwgMCwgXCJjaGVjayBsZW5ndGggemVybyBxXCIgKTtcblxuXHR9KTtcblxufVxuXG5leHBvcnQgY29uc3QgbWVyZ2UgPSB0ZXN0ZXIyKCBfbWVyZ2UgKSA7XG4iXX0=
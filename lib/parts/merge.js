"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.merge = undefined;
exports._merge = _merge;

var _tester = require("../tester");

function _merge(_test, heapname, Heap, diffname, diff, m, n) {

	var title = "Heap merge (" + heapname + ", " + diffname + ", " + m + ", " + n + ")";

	_test(title, function (t) {

		var q, q1, q2, a, x, i, b;

		a = [];
		q = Heap(diff);
		q1 = Heap(diff);
		q2 = Heap(diff);

		if (length) t.deepEqual(q1.length, 0, "check length zero q1");
		if (length) t.deepEqual(q2.length, 0, "check length zero q2");

		t.deepEqual(q.pop(), undefined, "1st empty pop");

		i = m;
		while (i--) {
			x = Math.random();
			q1.push(x);
			a.push(x);
			if (length) t.deepEqual(q1.length, a.length);
		}

		i = n;
		while (i--) {
			x = Math.random();
			q2.push(x);
			a.push(x);
			if (length) t.deepEqual(q2.length, a.length - m);
		}

		a.sort(diff);

		q.merge(q1);
		q.merge(q2);

		i = m + n;
		b = [];

		if (length) t.deepEqual(q.length, i);

		while (i--) {
			b.push(q.pop());
			if (length) t.deepEqual(q.length, i);
		}

		t.deepEqual(b, a, "check sorted");

		t.deepEqual(q.pop(), undefined, "2nd empty pop");

		if (length) t.deepEqual(q.length, 0, "check length zero q");
	});
}

var merge = exports.merge = (0, _tester.tester2)(_merge);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wYXJ0cy9tZXJnZS5qcyJdLCJuYW1lcyI6WyJfbWVyZ2UiLCJfdGVzdCIsImhlYXBuYW1lIiwiSGVhcCIsImRpZmZuYW1lIiwiZGlmZiIsIm0iLCJuIiwidGl0bGUiLCJxIiwicTEiLCJxMiIsImEiLCJ4IiwiaSIsImIiLCJsZW5ndGgiLCJ0IiwiZGVlcEVxdWFsIiwicG9wIiwidW5kZWZpbmVkIiwiTWF0aCIsInJhbmRvbSIsInB1c2giLCJzb3J0IiwibWVyZ2UiXSwibWFwcGluZ3MiOiI7Ozs7OztRQUVnQkEsTSxHQUFBQSxNOztBQUZoQjs7QUFFTyxTQUFTQSxNQUFULENBQWtCQyxLQUFsQixFQUF5QkMsUUFBekIsRUFBbUNDLElBQW5DLEVBQXlDQyxRQUF6QyxFQUFtREMsSUFBbkQsRUFBeURDLENBQXpELEVBQTREQyxDQUE1RCxFQUFnRTs7QUFFdEUsS0FBTUMseUJBQXVCTixRQUF2QixVQUFvQ0UsUUFBcEMsVUFBaURFLENBQWpELFVBQXVEQyxDQUF2RCxNQUFOOztBQUVBTixPQUFPTyxLQUFQLEVBQWMsYUFBSzs7QUFFbEIsTUFBSUMsQ0FBSixFQUFPQyxFQUFQLEVBQVdDLEVBQVgsRUFBZUMsQ0FBZixFQUFrQkMsQ0FBbEIsRUFBcUJDLENBQXJCLEVBQXdCQyxDQUF4Qjs7QUFFQUgsTUFBSSxFQUFKO0FBQ0FILE1BQUlOLEtBQU1FLElBQU4sQ0FBSjtBQUNBSyxPQUFLUCxLQUFNRSxJQUFOLENBQUw7QUFDQU0sT0FBS1IsS0FBTUUsSUFBTixDQUFMOztBQUVBLE1BQUlXLE1BQUosRUFBWUMsRUFBRUMsU0FBRixDQUFhUixHQUFHTSxNQUFoQixFQUF3QixDQUF4QixFQUEyQixzQkFBM0I7QUFDWixNQUFJQSxNQUFKLEVBQVlDLEVBQUVDLFNBQUYsQ0FBYVAsR0FBR0ssTUFBaEIsRUFBd0IsQ0FBeEIsRUFBMkIsc0JBQTNCOztBQUVaQyxJQUFFQyxTQUFGLENBQWFULEVBQUVVLEdBQUYsRUFBYixFQUFzQkMsU0FBdEIsRUFBaUMsZUFBakM7O0FBRUFOLE1BQUlSLENBQUo7QUFDQSxTQUFRUSxHQUFSLEVBQWM7QUFDYkQsT0FBSVEsS0FBS0MsTUFBTCxFQUFKO0FBQ0FaLE1BQUdhLElBQUgsQ0FBUVYsQ0FBUjtBQUNBRCxLQUFFVyxJQUFGLENBQU9WLENBQVA7QUFDQSxPQUFJRyxNQUFKLEVBQVlDLEVBQUVDLFNBQUYsQ0FBYVIsR0FBR00sTUFBaEIsRUFBd0JKLEVBQUVJLE1BQTFCO0FBQ1o7O0FBRURGLE1BQUlQLENBQUo7QUFDQSxTQUFRTyxHQUFSLEVBQWM7QUFDYkQsT0FBSVEsS0FBS0MsTUFBTCxFQUFKO0FBQ0FYLE1BQUdZLElBQUgsQ0FBUVYsQ0FBUjtBQUNBRCxLQUFFVyxJQUFGLENBQU9WLENBQVA7QUFDQSxPQUFJRyxNQUFKLEVBQVlDLEVBQUVDLFNBQUYsQ0FBYVAsR0FBR0ssTUFBaEIsRUFBd0JKLEVBQUVJLE1BQUYsR0FBV1YsQ0FBbkM7QUFDWjs7QUFFRE0sSUFBRVksSUFBRixDQUFRbkIsSUFBUjs7QUFFQUksSUFBRWdCLEtBQUYsQ0FBU2YsRUFBVDtBQUNBRCxJQUFFZ0IsS0FBRixDQUFTZCxFQUFUOztBQUVBRyxNQUFJUixJQUFJQyxDQUFSO0FBQ0FRLE1BQUksRUFBSjs7QUFFQSxNQUFJQyxNQUFKLEVBQVlDLEVBQUVDLFNBQUYsQ0FBYVQsRUFBRU8sTUFBZixFQUF1QkYsQ0FBdkI7O0FBRVosU0FBUUEsR0FBUixFQUFjO0FBQ2JDLEtBQUVRLElBQUYsQ0FBUWQsRUFBRVUsR0FBRixFQUFSO0FBQ0EsT0FBSUgsTUFBSixFQUFZQyxFQUFFQyxTQUFGLENBQWFULEVBQUVPLE1BQWYsRUFBdUJGLENBQXZCO0FBQ1o7O0FBRURHLElBQUVDLFNBQUYsQ0FBYUgsQ0FBYixFQUFnQkgsQ0FBaEIsRUFBbUIsY0FBbkI7O0FBRUFLLElBQUVDLFNBQUYsQ0FBYVQsRUFBRVUsR0FBRixFQUFiLEVBQXNCQyxTQUF0QixFQUFpQyxlQUFqQzs7QUFFQSxNQUFJSixNQUFKLEVBQVlDLEVBQUVDLFNBQUYsQ0FBYVQsRUFBRU8sTUFBZixFQUF1QixDQUF2QixFQUEwQixxQkFBMUI7QUFFWixFQW5ERDtBQXFEQTs7QUFFTSxJQUFNUyx3QkFBUSxxQkFBU3pCLE1BQVQsQ0FBZCIsImZpbGUiOiJtZXJnZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHRlc3RlcjIgfSBmcm9tICcuLi90ZXN0ZXInIDtcblxuZXhwb3J0IGZ1bmN0aW9uIF9tZXJnZSAoIF90ZXN0LCBoZWFwbmFtZSwgSGVhcCwgZGlmZm5hbWUsIGRpZmYsIG0sIG4gKSB7XG5cblx0Y29uc3QgdGl0bGUgPSBgSGVhcCBtZXJnZSAoJHtoZWFwbmFtZX0sICR7ZGlmZm5hbWV9LCAke219LCAke259KWA7XG5cblx0X3Rlc3QoIHRpdGxlLCB0ID0+IHtcblxuXHRcdHZhciBxLCBxMSwgcTIsIGEsIHgsIGksIGI7XG5cblx0XHRhID0gW107XG5cdFx0cSA9IEhlYXAoIGRpZmYgKTtcblx0XHRxMSA9IEhlYXAoIGRpZmYgKTtcblx0XHRxMiA9IEhlYXAoIGRpZmYgKTtcblxuXHRcdGlmIChsZW5ndGgpIHQuZGVlcEVxdWFsKCBxMS5sZW5ndGgsIDAsIFwiY2hlY2sgbGVuZ3RoIHplcm8gcTFcIiApO1xuXHRcdGlmIChsZW5ndGgpIHQuZGVlcEVxdWFsKCBxMi5sZW5ndGgsIDAsIFwiY2hlY2sgbGVuZ3RoIHplcm8gcTJcIiApO1xuXG5cdFx0dC5kZWVwRXF1YWwoIHEucG9wKCksIHVuZGVmaW5lZCwgXCIxc3QgZW1wdHkgcG9wXCIgKTtcblxuXHRcdGkgPSBtO1xuXHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0eCA9IE1hdGgucmFuZG9tKCk7XG5cdFx0XHRxMS5wdXNoKHgpO1xuXHRcdFx0YS5wdXNoKHgpO1xuXHRcdFx0aWYgKGxlbmd0aCkgdC5kZWVwRXF1YWwoIHExLmxlbmd0aCwgYS5sZW5ndGggKTtcblx0XHR9XG5cblx0XHRpID0gbjtcblx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdHggPSBNYXRoLnJhbmRvbSgpO1xuXHRcdFx0cTIucHVzaCh4KTtcblx0XHRcdGEucHVzaCh4KTtcblx0XHRcdGlmIChsZW5ndGgpIHQuZGVlcEVxdWFsKCBxMi5sZW5ndGgsIGEubGVuZ3RoIC0gbSApO1xuXHRcdH1cblxuXHRcdGEuc29ydCggZGlmZiApO1xuXG5cdFx0cS5tZXJnZSggcTEgKTtcblx0XHRxLm1lcmdlKCBxMiApO1xuXG5cdFx0aSA9IG0gKyBuO1xuXHRcdGIgPSBbXTtcblxuXHRcdGlmIChsZW5ndGgpIHQuZGVlcEVxdWFsKCBxLmxlbmd0aCwgaSApO1xuXG5cdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRiLnB1c2goIHEucG9wKCkgKTtcblx0XHRcdGlmIChsZW5ndGgpIHQuZGVlcEVxdWFsKCBxLmxlbmd0aCwgaSApO1xuXHRcdH1cblxuXHRcdHQuZGVlcEVxdWFsKCBiLCBhLCBcImNoZWNrIHNvcnRlZFwiICk7XG5cblx0XHR0LmRlZXBFcXVhbCggcS5wb3AoKSwgdW5kZWZpbmVkLCBcIjJuZCBlbXB0eSBwb3BcIiApO1xuXG5cdFx0aWYgKGxlbmd0aCkgdC5kZWVwRXF1YWwoIHEubGVuZ3RoLCAwLCBcImNoZWNrIGxlbmd0aCB6ZXJvIHFcIiApO1xuXG5cdH0pO1xuXG59XG5cbmV4cG9ydCBjb25zdCBtZXJnZSA9IHRlc3RlcjIoIF9tZXJnZSApIDtcbiJdfQ==
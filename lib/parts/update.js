'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.update = undefined;
exports._update = _update;

var _tester = require('../tester');

var _aureoomsJsRandom = require('aureooms-js-random');

function _update(_test, heapname, Heap, diffname, diff, n) {

	var title = 'Heap update (' + heapname + ', ' + diffname + ', ' + n + ')';

	_test(title, function (t) {

		var q, a, reference, references, i, x, b;

		q = Heap(diff);
		a = [];
		b = [];
		references = [];

		if (length) t.deepEqual(q.length, 0, "check length zero");

		i = n;
		while (i--) {
			x = Math.random();
			reference = q.push(x);
			references.push(reference);
			a.push(x);
			if (length) t.deepEqual(q.length, a.length);
		}

		(0, _aureoomsJsRandom.shuffle)(references, 0, n);

		for (i = 0; i < n; ++i) {

			a[i] += Math.random() - 0.5;
			q.update(references[i], a[i]);
			if (length) t.deepEqual(q.length, n);

			// not a typo
			q.update(references[i], a[i]);
			if (length) t.deepEqual(q.length, n);
		}

		i = n;

		while (i--) {

			b.push(q.pop());
			if (length) t.deepEqual(q.length, i);
		}

		a.sort(diff);

		t.deepEqual(b, a, "check identical");

		if (length) t.deepEqual(q.length, 0, "check length zero");

		t.deepEqual(q.head(), undefined, "check head empty");
		t.deepEqual(q.headreference(), null, "check headreference empty");
		t.deepEqual(q.pop(), undefined, "check pop empty");
		t.deepEqual(q.popreference(), null, "check popreference empty");
	});
}

var update = exports.update = (0, _tester.tester)(_update);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wYXJ0cy91cGRhdGUuanMiXSwibmFtZXMiOlsiX3VwZGF0ZSIsIl90ZXN0IiwiaGVhcG5hbWUiLCJIZWFwIiwiZGlmZm5hbWUiLCJkaWZmIiwibiIsInRpdGxlIiwicSIsImEiLCJyZWZlcmVuY2UiLCJyZWZlcmVuY2VzIiwiaSIsIngiLCJiIiwibGVuZ3RoIiwidCIsImRlZXBFcXVhbCIsIk1hdGgiLCJyYW5kb20iLCJwdXNoIiwidXBkYXRlIiwicG9wIiwic29ydCIsImhlYWQiLCJ1bmRlZmluZWQiLCJoZWFkcmVmZXJlbmNlIiwicG9wcmVmZXJlbmNlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7UUFHZ0JBLE8sR0FBQUEsTzs7QUFIaEI7O0FBQ0E7O0FBRU8sU0FBU0EsT0FBVCxDQUFtQkMsS0FBbkIsRUFBMEJDLFFBQTFCLEVBQW9DQyxJQUFwQyxFQUEwQ0MsUUFBMUMsRUFBb0RDLElBQXBELEVBQTBEQyxDQUExRCxFQUE4RDs7QUFFcEUsS0FBTUMsMEJBQXdCTCxRQUF4QixVQUFxQ0UsUUFBckMsVUFBa0RFLENBQWxELE1BQU47O0FBRUFMLE9BQU9NLEtBQVAsRUFBYyxhQUFLOztBQUVsQixNQUFJQyxDQUFKLEVBQU9DLENBQVAsRUFBVUMsU0FBVixFQUFxQkMsVUFBckIsRUFBaUNDLENBQWpDLEVBQW9DQyxDQUFwQyxFQUF1Q0MsQ0FBdkM7O0FBRUFOLE1BQUlMLEtBQU1FLElBQU4sQ0FBSjtBQUNBSSxNQUFJLEVBQUo7QUFDQUssTUFBSSxFQUFKO0FBQ0FILGVBQWEsRUFBYjs7QUFFQSxNQUFJSSxNQUFKLEVBQVlDLEVBQUVDLFNBQUYsQ0FBYVQsRUFBRU8sTUFBZixFQUF1QixDQUF2QixFQUEwQixtQkFBMUI7O0FBRVpILE1BQUlOLENBQUo7QUFDQSxTQUFRTSxHQUFSLEVBQWM7QUFDYkMsT0FBSUssS0FBS0MsTUFBTCxFQUFKO0FBQ0FULGVBQVlGLEVBQUVZLElBQUYsQ0FBUVAsQ0FBUixDQUFaO0FBQ0FGLGNBQVdTLElBQVgsQ0FBaUJWLFNBQWpCO0FBQ0FELEtBQUVXLElBQUYsQ0FBUVAsQ0FBUjtBQUNBLE9BQUlFLE1BQUosRUFBWUMsRUFBRUMsU0FBRixDQUFhVCxFQUFFTyxNQUFmLEVBQXVCTixFQUFFTSxNQUF6QjtBQUNaOztBQUVELGlDQUFTSixVQUFULEVBQXFCLENBQXJCLEVBQXdCTCxDQUF4Qjs7QUFFQSxPQUFNTSxJQUFJLENBQVYsRUFBY0EsSUFBSU4sQ0FBbEIsRUFBc0IsRUFBRU0sQ0FBeEIsRUFBNEI7O0FBRTNCSCxLQUFFRyxDQUFGLEtBQVFNLEtBQUtDLE1BQUwsS0FBZ0IsR0FBeEI7QUFDQVgsS0FBRWEsTUFBRixDQUFVVixXQUFXQyxDQUFYLENBQVYsRUFBeUJILEVBQUVHLENBQUYsQ0FBekI7QUFDQSxPQUFJRyxNQUFKLEVBQVlDLEVBQUVDLFNBQUYsQ0FBYVQsRUFBRU8sTUFBZixFQUF1QlQsQ0FBdkI7O0FBRVo7QUFDQUUsS0FBRWEsTUFBRixDQUFVVixXQUFXQyxDQUFYLENBQVYsRUFBeUJILEVBQUVHLENBQUYsQ0FBekI7QUFDQSxPQUFJRyxNQUFKLEVBQVlDLEVBQUVDLFNBQUYsQ0FBYVQsRUFBRU8sTUFBZixFQUF1QlQsQ0FBdkI7QUFFWjs7QUFFRE0sTUFBSU4sQ0FBSjs7QUFFQSxTQUFRTSxHQUFSLEVBQWM7O0FBRWJFLEtBQUVNLElBQUYsQ0FBUVosRUFBRWMsR0FBRixFQUFSO0FBQ0EsT0FBSVAsTUFBSixFQUFZQyxFQUFFQyxTQUFGLENBQWFULEVBQUVPLE1BQWYsRUFBdUJILENBQXZCO0FBRVo7O0FBRURILElBQUVjLElBQUYsQ0FBUWxCLElBQVI7O0FBRUFXLElBQUVDLFNBQUYsQ0FBYUgsQ0FBYixFQUFnQkwsQ0FBaEIsRUFBbUIsaUJBQW5COztBQUVBLE1BQUlNLE1BQUosRUFBWUMsRUFBRUMsU0FBRixDQUFhVCxFQUFFTyxNQUFmLEVBQXVCLENBQXZCLEVBQTBCLG1CQUExQjs7QUFFWkMsSUFBRUMsU0FBRixDQUFhVCxFQUFFZ0IsSUFBRixFQUFiLEVBQXVCQyxTQUF2QixFQUFrQyxrQkFBbEM7QUFDQVQsSUFBRUMsU0FBRixDQUFhVCxFQUFFa0IsYUFBRixFQUFiLEVBQWdDLElBQWhDLEVBQXNDLDJCQUF0QztBQUNBVixJQUFFQyxTQUFGLENBQWFULEVBQUVjLEdBQUYsRUFBYixFQUFzQkcsU0FBdEIsRUFBaUMsaUJBQWpDO0FBQ0FULElBQUVDLFNBQUYsQ0FBYVQsRUFBRW1CLFlBQUYsRUFBYixFQUErQixJQUEvQixFQUFxQywwQkFBckM7QUFFQSxFQXRERDtBQXdEQTs7QUFFTSxJQUFNTiwwQkFBUyxvQkFBUXJCLE9BQVIsQ0FBZiIsImZpbGUiOiJ1cGRhdGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB0ZXN0ZXIgfSBmcm9tICcuLi90ZXN0ZXInIDtcbmltcG9ydCB7IHNodWZmbGUgfSBmcm9tICdhdXJlb29tcy1qcy1yYW5kb20nIDtcblxuZXhwb3J0IGZ1bmN0aW9uIF91cGRhdGUgKCBfdGVzdCwgaGVhcG5hbWUsIEhlYXAsIGRpZmZuYW1lLCBkaWZmLCBuICkge1xuXG5cdGNvbnN0IHRpdGxlID0gYEhlYXAgdXBkYXRlICgke2hlYXBuYW1lfSwgJHtkaWZmbmFtZX0sICR7bn0pYDtcblxuXHRfdGVzdCggdGl0bGUsIHQgPT4ge1xuXG5cdFx0dmFyIHEsIGEsIHJlZmVyZW5jZSwgcmVmZXJlbmNlcywgaSwgeCwgYjtcblxuXHRcdHEgPSBIZWFwKCBkaWZmICk7XG5cdFx0YSA9IFtdO1xuXHRcdGIgPSBbXTtcblx0XHRyZWZlcmVuY2VzID0gW107XG5cblx0XHRpZiAobGVuZ3RoKSB0LmRlZXBFcXVhbCggcS5sZW5ndGgsIDAsIFwiY2hlY2sgbGVuZ3RoIHplcm9cIik7XG5cblx0XHRpID0gbjtcblx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdHggPSBNYXRoLnJhbmRvbSgpO1xuXHRcdFx0cmVmZXJlbmNlID0gcS5wdXNoKCB4ICk7XG5cdFx0XHRyZWZlcmVuY2VzLnB1c2goIHJlZmVyZW5jZSApO1xuXHRcdFx0YS5wdXNoKCB4ICk7XG5cdFx0XHRpZiAobGVuZ3RoKSB0LmRlZXBFcXVhbCggcS5sZW5ndGgsIGEubGVuZ3RoKTtcblx0XHR9XG5cblx0XHRzaHVmZmxlKCByZWZlcmVuY2VzLCAwLCBuICk7XG5cblx0XHRmb3IgKCBpID0gMCA7IGkgPCBuIDsgKytpICkge1xuXG5cdFx0XHRhW2ldICs9IE1hdGgucmFuZG9tKCkgLSAwLjU7XG5cdFx0XHRxLnVwZGF0ZSggcmVmZXJlbmNlc1tpXSwgYVtpXSApO1xuXHRcdFx0aWYgKGxlbmd0aCkgdC5kZWVwRXF1YWwoIHEubGVuZ3RoLCBuKTtcblxuXHRcdFx0Ly8gbm90IGEgdHlwb1xuXHRcdFx0cS51cGRhdGUoIHJlZmVyZW5jZXNbaV0sIGFbaV0gKTtcblx0XHRcdGlmIChsZW5ndGgpIHQuZGVlcEVxdWFsKCBxLmxlbmd0aCwgbik7XG5cblx0XHR9XG5cblx0XHRpID0gbjtcblxuXHRcdHdoaWxlICggaS0tICkge1xuXG5cdFx0XHRiLnB1c2goIHEucG9wKCkgKTtcblx0XHRcdGlmIChsZW5ndGgpIHQuZGVlcEVxdWFsKCBxLmxlbmd0aCwgaSk7XG5cblx0XHR9XG5cblx0XHRhLnNvcnQoIGRpZmYgKTtcblxuXHRcdHQuZGVlcEVxdWFsKCBiLCBhLCBcImNoZWNrIGlkZW50aWNhbFwiKTtcblxuXHRcdGlmIChsZW5ndGgpIHQuZGVlcEVxdWFsKCBxLmxlbmd0aCwgMCwgXCJjaGVjayBsZW5ndGggemVyb1wiKTtcblxuXHRcdHQuZGVlcEVxdWFsKCBxLmhlYWQoKSwgdW5kZWZpbmVkLCBcImNoZWNrIGhlYWQgZW1wdHlcIik7XG5cdFx0dC5kZWVwRXF1YWwoIHEuaGVhZHJlZmVyZW5jZSgpLCBudWxsLCBcImNoZWNrIGhlYWRyZWZlcmVuY2UgZW1wdHlcIik7XG5cdFx0dC5kZWVwRXF1YWwoIHEucG9wKCksIHVuZGVmaW5lZCwgXCJjaGVjayBwb3AgZW1wdHlcIik7XG5cdFx0dC5kZWVwRXF1YWwoIHEucG9wcmVmZXJlbmNlKCksIG51bGwsIFwiY2hlY2sgcG9wcmVmZXJlbmNlIGVtcHR5XCIpO1xuXG5cdH0pO1xuXG59XG5cbmV4cG9ydCBjb25zdCB1cGRhdGUgPSB0ZXN0ZXIoIF91cGRhdGUgKSA7XG4iXX0=
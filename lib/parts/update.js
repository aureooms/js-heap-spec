'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.update = undefined;
exports._update = _update;

var _tester = require('../tester');

var _aureoomsJsRandom = require('aureooms-js-random');

function _update(_test, heapname, Heap, diffname, diff, n) {

	var title = 'Heap update (' + heapname + ', ' + diffname + ', ' + n + ')';

	_test(title, function (t) {

		var q, a, reference, references, i, x, b;

		q = Heap(diff);
		a = [];
		b = [];
		references = [];

		i = n;
		while (i--) {
			x = Math.random();
			reference = q.push(x);
			references.push(reference);
			a.push(x);
		}

		(0, _aureoomsJsRandom.shuffle)(references, 0, n);

		for (i = 0; i < n; ++i) {

			a[i] += Math.random() - 0.5;
			q.update(references[i], a[i]);

			// not a typo
			q.update(references[i], a[i]);
		}

		i = n;

		while (i--) {

			b.push(q.pop());
		}

		a.sort(diff);

		t.deepEqual(b, a, "check identical");

		t.deepEqual(q.length, 0, "check length empty");

		t.deepEqual(q.head(), undefined, "check head empty");
		t.deepEqual(q.headreference(), null, "check headreference empty");
		t.deepEqual(q.pop(), undefined, "check pop empty");
		t.deepEqual(q.popreference(), null, "check popreference empty");
	});
}

var update = exports.update = (0, _tester.tester)(_update);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wYXJ0cy91cGRhdGUuanMiXSwibmFtZXMiOlsiX3VwZGF0ZSIsIl90ZXN0IiwiaGVhcG5hbWUiLCJIZWFwIiwiZGlmZm5hbWUiLCJkaWZmIiwibiIsInRpdGxlIiwicSIsImEiLCJyZWZlcmVuY2UiLCJyZWZlcmVuY2VzIiwiaSIsIngiLCJiIiwiTWF0aCIsInJhbmRvbSIsInB1c2giLCJ1cGRhdGUiLCJwb3AiLCJzb3J0IiwidCIsImRlZXBFcXVhbCIsImxlbmd0aCIsImhlYWQiLCJ1bmRlZmluZWQiLCJoZWFkcmVmZXJlbmNlIiwicG9wcmVmZXJlbmNlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7UUFHZ0JBLE8sR0FBQUEsTzs7QUFIaEI7O0FBQ0E7O0FBRU8sU0FBU0EsT0FBVCxDQUFtQkMsS0FBbkIsRUFBMEJDLFFBQTFCLEVBQW9DQyxJQUFwQyxFQUEwQ0MsUUFBMUMsRUFBb0RDLElBQXBELEVBQTBEQyxDQUExRCxFQUE4RDs7QUFFcEUsS0FBTUMsMEJBQXdCTCxRQUF4QixVQUFxQ0UsUUFBckMsVUFBa0RFLENBQWxELE1BQU47O0FBRUFMLE9BQU9NLEtBQVAsRUFBYyxhQUFLOztBQUVsQixNQUFJQyxDQUFKLEVBQU9DLENBQVAsRUFBVUMsU0FBVixFQUFxQkMsVUFBckIsRUFBaUNDLENBQWpDLEVBQW9DQyxDQUFwQyxFQUF1Q0MsQ0FBdkM7O0FBRUFOLE1BQUlMLEtBQU1FLElBQU4sQ0FBSjtBQUNBSSxNQUFJLEVBQUo7QUFDQUssTUFBSSxFQUFKO0FBQ0FILGVBQWEsRUFBYjs7QUFFQUMsTUFBSU4sQ0FBSjtBQUNBLFNBQVFNLEdBQVIsRUFBYztBQUNiQyxPQUFJRSxLQUFLQyxNQUFMLEVBQUo7QUFDQU4sZUFBWUYsRUFBRVMsSUFBRixDQUFRSixDQUFSLENBQVo7QUFDQUYsY0FBV00sSUFBWCxDQUFpQlAsU0FBakI7QUFDQUQsS0FBRVEsSUFBRixDQUFRSixDQUFSO0FBQ0E7O0FBRUQsaUNBQVNGLFVBQVQsRUFBcUIsQ0FBckIsRUFBd0JMLENBQXhCOztBQUVBLE9BQU1NLElBQUksQ0FBVixFQUFjQSxJQUFJTixDQUFsQixFQUFzQixFQUFFTSxDQUF4QixFQUE0Qjs7QUFFM0JILEtBQUVHLENBQUYsS0FBUUcsS0FBS0MsTUFBTCxLQUFnQixHQUF4QjtBQUNBUixLQUFFVSxNQUFGLENBQVVQLFdBQVdDLENBQVgsQ0FBVixFQUF5QkgsRUFBRUcsQ0FBRixDQUF6Qjs7QUFFQTtBQUNBSixLQUFFVSxNQUFGLENBQVVQLFdBQVdDLENBQVgsQ0FBVixFQUF5QkgsRUFBRUcsQ0FBRixDQUF6QjtBQUVBOztBQUVEQSxNQUFJTixDQUFKOztBQUVBLFNBQVFNLEdBQVIsRUFBYzs7QUFFYkUsS0FBRUcsSUFBRixDQUFRVCxFQUFFVyxHQUFGLEVBQVI7QUFFQTs7QUFFRFYsSUFBRVcsSUFBRixDQUFRZixJQUFSOztBQUVBZ0IsSUFBRUMsU0FBRixDQUFhUixDQUFiLEVBQWdCTCxDQUFoQixFQUFtQixpQkFBbkI7O0FBRUFZLElBQUVDLFNBQUYsQ0FBYWQsRUFBRWUsTUFBZixFQUF1QixDQUF2QixFQUEwQixvQkFBMUI7O0FBR0FGLElBQUVDLFNBQUYsQ0FBYWQsRUFBRWdCLElBQUYsRUFBYixFQUF1QkMsU0FBdkIsRUFBa0Msa0JBQWxDO0FBQ0FKLElBQUVDLFNBQUYsQ0FBYWQsRUFBRWtCLGFBQUYsRUFBYixFQUFnQyxJQUFoQyxFQUFzQywyQkFBdEM7QUFDQUwsSUFBRUMsU0FBRixDQUFhZCxFQUFFVyxHQUFGLEVBQWIsRUFBc0JNLFNBQXRCLEVBQWlDLGlCQUFqQztBQUNBSixJQUFFQyxTQUFGLENBQWFkLEVBQUVtQixZQUFGLEVBQWIsRUFBK0IsSUFBL0IsRUFBcUMsMEJBQXJDO0FBRUEsRUFqREQ7QUFtREE7O0FBRU0sSUFBTVQsMEJBQVMsb0JBQVFsQixPQUFSLENBQWYiLCJmaWxlIjoidXBkYXRlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdGVzdGVyIH0gZnJvbSAnLi4vdGVzdGVyJyA7XG5pbXBvcnQgeyBzaHVmZmxlIH0gZnJvbSAnYXVyZW9vbXMtanMtcmFuZG9tJyA7XG5cbmV4cG9ydCBmdW5jdGlvbiBfdXBkYXRlICggX3Rlc3QsIGhlYXBuYW1lLCBIZWFwLCBkaWZmbmFtZSwgZGlmZiwgbiApIHtcblxuXHRjb25zdCB0aXRsZSA9IGBIZWFwIHVwZGF0ZSAoJHtoZWFwbmFtZX0sICR7ZGlmZm5hbWV9LCAke259KWA7XG5cblx0X3Rlc3QoIHRpdGxlLCB0ID0+IHtcblxuXHRcdHZhciBxLCBhLCByZWZlcmVuY2UsIHJlZmVyZW5jZXMsIGksIHgsIGI7XG5cblx0XHRxID0gSGVhcCggZGlmZiApO1xuXHRcdGEgPSBbXTtcblx0XHRiID0gW107XG5cdFx0cmVmZXJlbmNlcyA9IFtdO1xuXG5cdFx0aSA9IG47XG5cdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHR4ID0gTWF0aC5yYW5kb20oKTtcblx0XHRcdHJlZmVyZW5jZSA9IHEucHVzaCggeCApO1xuXHRcdFx0cmVmZXJlbmNlcy5wdXNoKCByZWZlcmVuY2UgKTtcblx0XHRcdGEucHVzaCggeCApO1xuXHRcdH1cblxuXHRcdHNodWZmbGUoIHJlZmVyZW5jZXMsIDAsIG4gKTtcblxuXHRcdGZvciAoIGkgPSAwIDsgaSA8IG4gOyArK2kgKSB7XG5cblx0XHRcdGFbaV0gKz0gTWF0aC5yYW5kb20oKSAtIDAuNTtcblx0XHRcdHEudXBkYXRlKCByZWZlcmVuY2VzW2ldLCBhW2ldICk7XG5cblx0XHRcdC8vIG5vdCBhIHR5cG9cblx0XHRcdHEudXBkYXRlKCByZWZlcmVuY2VzW2ldLCBhW2ldICk7XG5cblx0XHR9XG5cblx0XHRpID0gbjtcblxuXHRcdHdoaWxlICggaS0tICkge1xuXG5cdFx0XHRiLnB1c2goIHEucG9wKCkgKTtcblxuXHRcdH1cblxuXHRcdGEuc29ydCggZGlmZiApO1xuXG5cdFx0dC5kZWVwRXF1YWwoIGIsIGEsIFwiY2hlY2sgaWRlbnRpY2FsXCIpO1xuXG5cdFx0dC5kZWVwRXF1YWwoIHEubGVuZ3RoLCAwLCBcImNoZWNrIGxlbmd0aCBlbXB0eVwiKTtcblxuXG5cdFx0dC5kZWVwRXF1YWwoIHEuaGVhZCgpLCB1bmRlZmluZWQsIFwiY2hlY2sgaGVhZCBlbXB0eVwiKTtcblx0XHR0LmRlZXBFcXVhbCggcS5oZWFkcmVmZXJlbmNlKCksIG51bGwsIFwiY2hlY2sgaGVhZHJlZmVyZW5jZSBlbXB0eVwiKTtcblx0XHR0LmRlZXBFcXVhbCggcS5wb3AoKSwgdW5kZWZpbmVkLCBcImNoZWNrIHBvcCBlbXB0eVwiKTtcblx0XHR0LmRlZXBFcXVhbCggcS5wb3ByZWZlcmVuY2UoKSwgbnVsbCwgXCJjaGVjayBwb3ByZWZlcmVuY2UgZW1wdHlcIik7XG5cblx0fSk7XG5cbn1cblxuZXhwb3J0IGNvbnN0IHVwZGF0ZSA9IHRlc3RlciggX3VwZGF0ZSApIDtcbiJdfQ==
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.update = undefined;
exports._update = _update;

var _tester = require('../tester');

var _jsRandom = require('@aureooms/js-random');

function _update(_test, length, heapname, Heap, diffname, diff, n) {

	var title = 'Heap update (' + heapname + ', ' + diffname + ', ' + n + ')';

	_test(title, function (t) {

		var q, a, reference, references, i, x, b;

		q = Heap(diff);
		a = [];
		b = [];
		references = [];

		if (length) t.deepEqual(q.length, 0, "check length zero");

		i = n;
		while (i--) {
			x = Math.random();
			reference = q.push(x);
			references.push(reference);
			a.push(x);
			if (length) t.deepEqual(q.length, a.length);
		}

		(0, _jsRandom.shuffle)(references, 0, n);

		for (i = 0; i < n; ++i) {

			a[i] += Math.random() - 0.5;
			q.update(references[i], a[i]);
			if (length) t.deepEqual(q.length, n);

			// not a typo
			q.update(references[i], a[i]);
			if (length) t.deepEqual(q.length, n);
		}

		i = n;

		while (i--) {

			b.push(q.pop());
			if (length) t.deepEqual(q.length, i);
		}

		a.sort(diff);

		t.deepEqual(b, a, "check identical");

		if (length) t.deepEqual(q.length, 0, "check length zero");

		t.deepEqual(q.head(), undefined, "check head empty");
		t.deepEqual(q.headreference(), null, "check headreference empty");
		t.deepEqual(q.pop(), undefined, "check pop empty");
		t.deepEqual(q.popreference(), null, "check popreference empty");
	});
}

var update = exports.update = (0, _tester.tester)(_update);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wYXJ0cy91cGRhdGUuanMiXSwibmFtZXMiOlsiX3VwZGF0ZSIsIl90ZXN0IiwibGVuZ3RoIiwiaGVhcG5hbWUiLCJIZWFwIiwiZGlmZm5hbWUiLCJkaWZmIiwibiIsInRpdGxlIiwicSIsImEiLCJyZWZlcmVuY2UiLCJyZWZlcmVuY2VzIiwiaSIsIngiLCJiIiwidCIsImRlZXBFcXVhbCIsIk1hdGgiLCJyYW5kb20iLCJwdXNoIiwidXBkYXRlIiwicG9wIiwic29ydCIsImhlYWQiLCJ1bmRlZmluZWQiLCJoZWFkcmVmZXJlbmNlIiwicG9wcmVmZXJlbmNlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7UUFHZ0JBLE8sR0FBQUEsTzs7QUFIaEI7O0FBQ0E7O0FBRU8sU0FBU0EsT0FBVCxDQUFtQkMsS0FBbkIsRUFBMEJDLE1BQTFCLEVBQWtDQyxRQUFsQyxFQUE0Q0MsSUFBNUMsRUFBa0RDLFFBQWxELEVBQTREQyxJQUE1RCxFQUFrRUMsQ0FBbEUsRUFBc0U7O0FBRTVFLEtBQU1DLDBCQUF3QkwsUUFBeEIsVUFBcUNFLFFBQXJDLFVBQWtERSxDQUFsRCxNQUFOOztBQUVBTixPQUFPTyxLQUFQLEVBQWMsYUFBSzs7QUFFbEIsTUFBSUMsQ0FBSixFQUFPQyxDQUFQLEVBQVVDLFNBQVYsRUFBcUJDLFVBQXJCLEVBQWlDQyxDQUFqQyxFQUFvQ0MsQ0FBcEMsRUFBdUNDLENBQXZDOztBQUVBTixNQUFJTCxLQUFNRSxJQUFOLENBQUo7QUFDQUksTUFBSSxFQUFKO0FBQ0FLLE1BQUksRUFBSjtBQUNBSCxlQUFhLEVBQWI7O0FBRUEsTUFBSVYsTUFBSixFQUFZYyxFQUFFQyxTQUFGLENBQWFSLEVBQUVQLE1BQWYsRUFBdUIsQ0FBdkIsRUFBMEIsbUJBQTFCOztBQUVaVyxNQUFJTixDQUFKO0FBQ0EsU0FBUU0sR0FBUixFQUFjO0FBQ2JDLE9BQUlJLEtBQUtDLE1BQUwsRUFBSjtBQUNBUixlQUFZRixFQUFFVyxJQUFGLENBQVFOLENBQVIsQ0FBWjtBQUNBRixjQUFXUSxJQUFYLENBQWlCVCxTQUFqQjtBQUNBRCxLQUFFVSxJQUFGLENBQVFOLENBQVI7QUFDQSxPQUFJWixNQUFKLEVBQVljLEVBQUVDLFNBQUYsQ0FBYVIsRUFBRVAsTUFBZixFQUF1QlEsRUFBRVIsTUFBekI7QUFDWjs7QUFFRCx5QkFBU1UsVUFBVCxFQUFxQixDQUFyQixFQUF3QkwsQ0FBeEI7O0FBRUEsT0FBTU0sSUFBSSxDQUFWLEVBQWNBLElBQUlOLENBQWxCLEVBQXNCLEVBQUVNLENBQXhCLEVBQTRCOztBQUUzQkgsS0FBRUcsQ0FBRixLQUFRSyxLQUFLQyxNQUFMLEtBQWdCLEdBQXhCO0FBQ0FWLEtBQUVZLE1BQUYsQ0FBVVQsV0FBV0MsQ0FBWCxDQUFWLEVBQXlCSCxFQUFFRyxDQUFGLENBQXpCO0FBQ0EsT0FBSVgsTUFBSixFQUFZYyxFQUFFQyxTQUFGLENBQWFSLEVBQUVQLE1BQWYsRUFBdUJLLENBQXZCOztBQUVaO0FBQ0FFLEtBQUVZLE1BQUYsQ0FBVVQsV0FBV0MsQ0FBWCxDQUFWLEVBQXlCSCxFQUFFRyxDQUFGLENBQXpCO0FBQ0EsT0FBSVgsTUFBSixFQUFZYyxFQUFFQyxTQUFGLENBQWFSLEVBQUVQLE1BQWYsRUFBdUJLLENBQXZCO0FBRVo7O0FBRURNLE1BQUlOLENBQUo7O0FBRUEsU0FBUU0sR0FBUixFQUFjOztBQUViRSxLQUFFSyxJQUFGLENBQVFYLEVBQUVhLEdBQUYsRUFBUjtBQUNBLE9BQUlwQixNQUFKLEVBQVljLEVBQUVDLFNBQUYsQ0FBYVIsRUFBRVAsTUFBZixFQUF1QlcsQ0FBdkI7QUFFWjs7QUFFREgsSUFBRWEsSUFBRixDQUFRakIsSUFBUjs7QUFFQVUsSUFBRUMsU0FBRixDQUFhRixDQUFiLEVBQWdCTCxDQUFoQixFQUFtQixpQkFBbkI7O0FBRUEsTUFBSVIsTUFBSixFQUFZYyxFQUFFQyxTQUFGLENBQWFSLEVBQUVQLE1BQWYsRUFBdUIsQ0FBdkIsRUFBMEIsbUJBQTFCOztBQUVaYyxJQUFFQyxTQUFGLENBQWFSLEVBQUVlLElBQUYsRUFBYixFQUF1QkMsU0FBdkIsRUFBa0Msa0JBQWxDO0FBQ0FULElBQUVDLFNBQUYsQ0FBYVIsRUFBRWlCLGFBQUYsRUFBYixFQUFnQyxJQUFoQyxFQUFzQywyQkFBdEM7QUFDQVYsSUFBRUMsU0FBRixDQUFhUixFQUFFYSxHQUFGLEVBQWIsRUFBc0JHLFNBQXRCLEVBQWlDLGlCQUFqQztBQUNBVCxJQUFFQyxTQUFGLENBQWFSLEVBQUVrQixZQUFGLEVBQWIsRUFBK0IsSUFBL0IsRUFBcUMsMEJBQXJDO0FBRUEsRUF0REQ7QUF3REE7O0FBRU0sSUFBTU4sMEJBQVMsb0JBQVFyQixPQUFSLENBQWYiLCJmaWxlIjoidXBkYXRlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdGVzdGVyIH0gZnJvbSAnLi4vdGVzdGVyJyA7XG5pbXBvcnQgeyBzaHVmZmxlIH0gZnJvbSAnQGF1cmVvb21zL2pzLXJhbmRvbScgO1xuXG5leHBvcnQgZnVuY3Rpb24gX3VwZGF0ZSAoIF90ZXN0LCBsZW5ndGgsIGhlYXBuYW1lLCBIZWFwLCBkaWZmbmFtZSwgZGlmZiwgbiApIHtcblxuXHRjb25zdCB0aXRsZSA9IGBIZWFwIHVwZGF0ZSAoJHtoZWFwbmFtZX0sICR7ZGlmZm5hbWV9LCAke259KWA7XG5cblx0X3Rlc3QoIHRpdGxlLCB0ID0+IHtcblxuXHRcdHZhciBxLCBhLCByZWZlcmVuY2UsIHJlZmVyZW5jZXMsIGksIHgsIGI7XG5cblx0XHRxID0gSGVhcCggZGlmZiApO1xuXHRcdGEgPSBbXTtcblx0XHRiID0gW107XG5cdFx0cmVmZXJlbmNlcyA9IFtdO1xuXG5cdFx0aWYgKGxlbmd0aCkgdC5kZWVwRXF1YWwoIHEubGVuZ3RoLCAwLCBcImNoZWNrIGxlbmd0aCB6ZXJvXCIpO1xuXG5cdFx0aSA9IG47XG5cdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHR4ID0gTWF0aC5yYW5kb20oKTtcblx0XHRcdHJlZmVyZW5jZSA9IHEucHVzaCggeCApO1xuXHRcdFx0cmVmZXJlbmNlcy5wdXNoKCByZWZlcmVuY2UgKTtcblx0XHRcdGEucHVzaCggeCApO1xuXHRcdFx0aWYgKGxlbmd0aCkgdC5kZWVwRXF1YWwoIHEubGVuZ3RoLCBhLmxlbmd0aCk7XG5cdFx0fVxuXG5cdFx0c2h1ZmZsZSggcmVmZXJlbmNlcywgMCwgbiApO1xuXG5cdFx0Zm9yICggaSA9IDAgOyBpIDwgbiA7ICsraSApIHtcblxuXHRcdFx0YVtpXSArPSBNYXRoLnJhbmRvbSgpIC0gMC41O1xuXHRcdFx0cS51cGRhdGUoIHJlZmVyZW5jZXNbaV0sIGFbaV0gKTtcblx0XHRcdGlmIChsZW5ndGgpIHQuZGVlcEVxdWFsKCBxLmxlbmd0aCwgbik7XG5cblx0XHRcdC8vIG5vdCBhIHR5cG9cblx0XHRcdHEudXBkYXRlKCByZWZlcmVuY2VzW2ldLCBhW2ldICk7XG5cdFx0XHRpZiAobGVuZ3RoKSB0LmRlZXBFcXVhbCggcS5sZW5ndGgsIG4pO1xuXG5cdFx0fVxuXG5cdFx0aSA9IG47XG5cblx0XHR3aGlsZSAoIGktLSApIHtcblxuXHRcdFx0Yi5wdXNoKCBxLnBvcCgpICk7XG5cdFx0XHRpZiAobGVuZ3RoKSB0LmRlZXBFcXVhbCggcS5sZW5ndGgsIGkpO1xuXG5cdFx0fVxuXG5cdFx0YS5zb3J0KCBkaWZmICk7XG5cblx0XHR0LmRlZXBFcXVhbCggYiwgYSwgXCJjaGVjayBpZGVudGljYWxcIik7XG5cblx0XHRpZiAobGVuZ3RoKSB0LmRlZXBFcXVhbCggcS5sZW5ndGgsIDAsIFwiY2hlY2sgbGVuZ3RoIHplcm9cIik7XG5cblx0XHR0LmRlZXBFcXVhbCggcS5oZWFkKCksIHVuZGVmaW5lZCwgXCJjaGVjayBoZWFkIGVtcHR5XCIpO1xuXHRcdHQuZGVlcEVxdWFsKCBxLmhlYWRyZWZlcmVuY2UoKSwgbnVsbCwgXCJjaGVjayBoZWFkcmVmZXJlbmNlIGVtcHR5XCIpO1xuXHRcdHQuZGVlcEVxdWFsKCBxLnBvcCgpLCB1bmRlZmluZWQsIFwiY2hlY2sgcG9wIGVtcHR5XCIpO1xuXHRcdHQuZGVlcEVxdWFsKCBxLnBvcHJlZmVyZW5jZSgpLCBudWxsLCBcImNoZWNrIHBvcHJlZmVyZW5jZSBlbXB0eVwiKTtcblxuXHR9KTtcblxufVxuXG5leHBvcnQgY29uc3QgdXBkYXRlID0gdGVzdGVyKCBfdXBkYXRlICkgO1xuIl19
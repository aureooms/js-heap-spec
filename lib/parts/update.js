'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.update = undefined;
exports._update = _update;

var _tester = require('../tester');

var _aureoomsJsRandom = require('@aureooms/js-random');

function _update(_test, length, heapname, Heap, diffname, diff, n) {

	var title = 'Heap update (' + heapname + ', ' + diffname + ', ' + n + ')';

	_test(title, function (t) {

		var q, a, reference, references, i, x, b;

		q = Heap(diff);
		a = [];
		b = [];
		references = [];

		if (length) t.deepEqual(q.length, 0, "check length zero");

		i = n;
		while (i--) {
			x = Math.random();
			reference = q.push(x);
			references.push(reference);
			a.push(x);
			if (length) t.deepEqual(q.length, a.length);
		}

		(0, _aureoomsJsRandom.shuffle)(references, 0, n);

		for (i = 0; i < n; ++i) {

			a[i] += Math.random() - 0.5;
			q.update(references[i], a[i]);
			if (length) t.deepEqual(q.length, n);

			// not a typo
			q.update(references[i], a[i]);
			if (length) t.deepEqual(q.length, n);
		}

		i = n;

		while (i--) {

			b.push(q.pop());
			if (length) t.deepEqual(q.length, i);
		}

		a.sort(diff);

		t.deepEqual(b, a, "check identical");

		if (length) t.deepEqual(q.length, 0, "check length zero");

		t.deepEqual(q.head(), undefined, "check head empty");
		t.deepEqual(q.headreference(), null, "check headreference empty");
		t.deepEqual(q.pop(), undefined, "check pop empty");
		t.deepEqual(q.popreference(), null, "check popreference empty");
	});
}

var update = exports.update = (0, _tester.tester)(_update);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wYXJ0cy91cGRhdGUuanMiXSwibmFtZXMiOlsiX3VwZGF0ZSIsIl90ZXN0IiwibGVuZ3RoIiwiaGVhcG5hbWUiLCJIZWFwIiwiZGlmZm5hbWUiLCJkaWZmIiwibiIsInRpdGxlIiwicSIsImEiLCJyZWZlcmVuY2UiLCJyZWZlcmVuY2VzIiwiaSIsIngiLCJiIiwidCIsImRlZXBFcXVhbCIsIk1hdGgiLCJyYW5kb20iLCJwdXNoIiwidXBkYXRlIiwicG9wIiwic29ydCIsImhlYWQiLCJ1bmRlZmluZWQiLCJoZWFkcmVmZXJlbmNlIiwicG9wcmVmZXJlbmNlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7UUFHZ0JBLE8sR0FBQUEsTzs7QUFIaEI7O0FBQ0E7O0FBRU8sU0FBU0EsT0FBVCxDQUFtQkMsS0FBbkIsRUFBMEJDLE1BQTFCLEVBQWtDQyxRQUFsQyxFQUE0Q0MsSUFBNUMsRUFBa0RDLFFBQWxELEVBQTREQyxJQUE1RCxFQUFrRUMsQ0FBbEUsRUFBc0U7O0FBRTVFLEtBQU1DLDBCQUF3QkwsUUFBeEIsVUFBcUNFLFFBQXJDLFVBQWtERSxDQUFsRCxNQUFOOztBQUVBTixPQUFPTyxLQUFQLEVBQWMsYUFBSzs7QUFFbEIsTUFBSUMsQ0FBSixFQUFPQyxDQUFQLEVBQVVDLFNBQVYsRUFBcUJDLFVBQXJCLEVBQWlDQyxDQUFqQyxFQUFvQ0MsQ0FBcEMsRUFBdUNDLENBQXZDOztBQUVBTixNQUFJTCxLQUFNRSxJQUFOLENBQUo7QUFDQUksTUFBSSxFQUFKO0FBQ0FLLE1BQUksRUFBSjtBQUNBSCxlQUFhLEVBQWI7O0FBRUEsTUFBSVYsTUFBSixFQUFZYyxFQUFFQyxTQUFGLENBQWFSLEVBQUVQLE1BQWYsRUFBdUIsQ0FBdkIsRUFBMEIsbUJBQTFCOztBQUVaVyxNQUFJTixDQUFKO0FBQ0EsU0FBUU0sR0FBUixFQUFjO0FBQ2JDLE9BQUlJLEtBQUtDLE1BQUwsRUFBSjtBQUNBUixlQUFZRixFQUFFVyxJQUFGLENBQVFOLENBQVIsQ0FBWjtBQUNBRixjQUFXUSxJQUFYLENBQWlCVCxTQUFqQjtBQUNBRCxLQUFFVSxJQUFGLENBQVFOLENBQVI7QUFDQSxPQUFJWixNQUFKLEVBQVljLEVBQUVDLFNBQUYsQ0FBYVIsRUFBRVAsTUFBZixFQUF1QlEsRUFBRVIsTUFBekI7QUFDWjs7QUFFRCxpQ0FBU1UsVUFBVCxFQUFxQixDQUFyQixFQUF3QkwsQ0FBeEI7O0FBRUEsT0FBTU0sSUFBSSxDQUFWLEVBQWNBLElBQUlOLENBQWxCLEVBQXNCLEVBQUVNLENBQXhCLEVBQTRCOztBQUUzQkgsS0FBRUcsQ0FBRixLQUFRSyxLQUFLQyxNQUFMLEtBQWdCLEdBQXhCO0FBQ0FWLEtBQUVZLE1BQUYsQ0FBVVQsV0FBV0MsQ0FBWCxDQUFWLEVBQXlCSCxFQUFFRyxDQUFGLENBQXpCO0FBQ0EsT0FBSVgsTUFBSixFQUFZYyxFQUFFQyxTQUFGLENBQWFSLEVBQUVQLE1BQWYsRUFBdUJLLENBQXZCOztBQUVaO0FBQ0FFLEtBQUVZLE1BQUYsQ0FBVVQsV0FBV0MsQ0FBWCxDQUFWLEVBQXlCSCxFQUFFRyxDQUFGLENBQXpCO0FBQ0EsT0FBSVgsTUFBSixFQUFZYyxFQUFFQyxTQUFGLENBQWFSLEVBQUVQLE1BQWYsRUFBdUJLLENBQXZCO0FBRVo7O0FBRURNLE1BQUlOLENBQUo7O0FBRUEsU0FBUU0sR0FBUixFQUFjOztBQUViRSxLQUFFSyxJQUFGLENBQVFYLEVBQUVhLEdBQUYsRUFBUjtBQUNBLE9BQUlwQixNQUFKLEVBQVljLEVBQUVDLFNBQUYsQ0FBYVIsRUFBRVAsTUFBZixFQUF1QlcsQ0FBdkI7QUFFWjs7QUFFREgsSUFBRWEsSUFBRixDQUFRakIsSUFBUjs7QUFFQVUsSUFBRUMsU0FBRixDQUFhRixDQUFiLEVBQWdCTCxDQUFoQixFQUFtQixpQkFBbkI7O0FBRUEsTUFBSVIsTUFBSixFQUFZYyxFQUFFQyxTQUFGLENBQWFSLEVBQUVQLE1BQWYsRUFBdUIsQ0FBdkIsRUFBMEIsbUJBQTFCOztBQUVaYyxJQUFFQyxTQUFGLENBQWFSLEVBQUVlLElBQUYsRUFBYixFQUF1QkMsU0FBdkIsRUFBa0Msa0JBQWxDO0FBQ0FULElBQUVDLFNBQUYsQ0FBYVIsRUFBRWlCLGFBQUYsRUFBYixFQUFnQyxJQUFoQyxFQUFzQywyQkFBdEM7QUFDQVYsSUFBRUMsU0FBRixDQUFhUixFQUFFYSxHQUFGLEVBQWIsRUFBc0JHLFNBQXRCLEVBQWlDLGlCQUFqQztBQUNBVCxJQUFFQyxTQUFGLENBQWFSLEVBQUVrQixZQUFGLEVBQWIsRUFBK0IsSUFBL0IsRUFBcUMsMEJBQXJDO0FBRUEsRUF0REQ7QUF3REE7O0FBRU0sSUFBTU4sMEJBQVMsb0JBQVFyQixPQUFSLENBQWYiLCJmaWxlIjoidXBkYXRlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdGVzdGVyIH0gZnJvbSAnLi4vdGVzdGVyJyA7XG5pbXBvcnQgeyBzaHVmZmxlIH0gZnJvbSAnYXVyZW9vbXMtanMtcmFuZG9tJyA7XG5cbmV4cG9ydCBmdW5jdGlvbiBfdXBkYXRlICggX3Rlc3QsIGxlbmd0aCwgaGVhcG5hbWUsIEhlYXAsIGRpZmZuYW1lLCBkaWZmLCBuICkge1xuXG5cdGNvbnN0IHRpdGxlID0gYEhlYXAgdXBkYXRlICgke2hlYXBuYW1lfSwgJHtkaWZmbmFtZX0sICR7bn0pYDtcblxuXHRfdGVzdCggdGl0bGUsIHQgPT4ge1xuXG5cdFx0dmFyIHEsIGEsIHJlZmVyZW5jZSwgcmVmZXJlbmNlcywgaSwgeCwgYjtcblxuXHRcdHEgPSBIZWFwKCBkaWZmICk7XG5cdFx0YSA9IFtdO1xuXHRcdGIgPSBbXTtcblx0XHRyZWZlcmVuY2VzID0gW107XG5cblx0XHRpZiAobGVuZ3RoKSB0LmRlZXBFcXVhbCggcS5sZW5ndGgsIDAsIFwiY2hlY2sgbGVuZ3RoIHplcm9cIik7XG5cblx0XHRpID0gbjtcblx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdHggPSBNYXRoLnJhbmRvbSgpO1xuXHRcdFx0cmVmZXJlbmNlID0gcS5wdXNoKCB4ICk7XG5cdFx0XHRyZWZlcmVuY2VzLnB1c2goIHJlZmVyZW5jZSApO1xuXHRcdFx0YS5wdXNoKCB4ICk7XG5cdFx0XHRpZiAobGVuZ3RoKSB0LmRlZXBFcXVhbCggcS5sZW5ndGgsIGEubGVuZ3RoKTtcblx0XHR9XG5cblx0XHRzaHVmZmxlKCByZWZlcmVuY2VzLCAwLCBuICk7XG5cblx0XHRmb3IgKCBpID0gMCA7IGkgPCBuIDsgKytpICkge1xuXG5cdFx0XHRhW2ldICs9IE1hdGgucmFuZG9tKCkgLSAwLjU7XG5cdFx0XHRxLnVwZGF0ZSggcmVmZXJlbmNlc1tpXSwgYVtpXSApO1xuXHRcdFx0aWYgKGxlbmd0aCkgdC5kZWVwRXF1YWwoIHEubGVuZ3RoLCBuKTtcblxuXHRcdFx0Ly8gbm90IGEgdHlwb1xuXHRcdFx0cS51cGRhdGUoIHJlZmVyZW5jZXNbaV0sIGFbaV0gKTtcblx0XHRcdGlmIChsZW5ndGgpIHQuZGVlcEVxdWFsKCBxLmxlbmd0aCwgbik7XG5cblx0XHR9XG5cblx0XHRpID0gbjtcblxuXHRcdHdoaWxlICggaS0tICkge1xuXG5cdFx0XHRiLnB1c2goIHEucG9wKCkgKTtcblx0XHRcdGlmIChsZW5ndGgpIHQuZGVlcEVxdWFsKCBxLmxlbmd0aCwgaSk7XG5cblx0XHR9XG5cblx0XHRhLnNvcnQoIGRpZmYgKTtcblxuXHRcdHQuZGVlcEVxdWFsKCBiLCBhLCBcImNoZWNrIGlkZW50aWNhbFwiKTtcblxuXHRcdGlmIChsZW5ndGgpIHQuZGVlcEVxdWFsKCBxLmxlbmd0aCwgMCwgXCJjaGVjayBsZW5ndGggemVyb1wiKTtcblxuXHRcdHQuZGVlcEVxdWFsKCBxLmhlYWQoKSwgdW5kZWZpbmVkLCBcImNoZWNrIGhlYWQgZW1wdHlcIik7XG5cdFx0dC5kZWVwRXF1YWwoIHEuaGVhZHJlZmVyZW5jZSgpLCBudWxsLCBcImNoZWNrIGhlYWRyZWZlcmVuY2UgZW1wdHlcIik7XG5cdFx0dC5kZWVwRXF1YWwoIHEucG9wKCksIHVuZGVmaW5lZCwgXCJjaGVjayBwb3AgZW1wdHlcIik7XG5cdFx0dC5kZWVwRXF1YWwoIHEucG9wcmVmZXJlbmNlKCksIG51bGwsIFwiY2hlY2sgcG9wcmVmZXJlbmNlIGVtcHR5XCIpO1xuXG5cdH0pO1xuXG59XG5cbmV4cG9ydCBjb25zdCB1cGRhdGUgPSB0ZXN0ZXIoIF91cGRhdGUgKSA7XG4iXX0=
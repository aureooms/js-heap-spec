'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.del = undefined;
exports._del = _del;

var _tester = require('../tester');

var _aureoomsJsRandom = require('aureooms-js-random');

function _del(_test, heapname, Heap, diffname, diff, n) {

	var title = 'Heap delete (' + heapname + ', ' + diffname + ', ' + n + ')';

	_test(title, function (t) {

		var q, a, reference, references, i, x, b;

		q = Heap(diff);
		a = [];
		b = [];
		references = [];

		i = n;
		while (i--) {
			x = Math.random();
			reference = q.push(x);
			references.push(reference);
			a.push(x);
		}

		(0, _aureoomsJsRandom.shuffle)(references, 0, n);

		for (i = 0; i < n / 2; ++i) {

			b.push(references[i].value);
			q.delete(references[i]);
		}

		for (; i < n; ++i) {

			b.push(q.pop());
		}

		a.sort(diff);
		b.sort(diff);

		t.deepEqual(b, a, "check identical");

		t.deepEqual(q.length, 0, "check length empty");

		t.deepEqual(q.head(), undefined, "check head empty");
		t.deepEqual(q.headreference(), null, "check headreference empty");
		t.deepEqual(q.pop(), undefined, "check pop empty");
		t.deepEqual(q.popreference(), null, "check popreference empty");
	});
}

var del = exports.del = (0, _tester.tester)(_del);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wYXJ0cy9kZWxldGUuanMiXSwibmFtZXMiOlsiX2RlbCIsIl90ZXN0IiwiaGVhcG5hbWUiLCJIZWFwIiwiZGlmZm5hbWUiLCJkaWZmIiwibiIsInRpdGxlIiwicSIsImEiLCJyZWZlcmVuY2UiLCJyZWZlcmVuY2VzIiwiaSIsIngiLCJiIiwiTWF0aCIsInJhbmRvbSIsInB1c2giLCJ2YWx1ZSIsImRlbGV0ZSIsInBvcCIsInNvcnQiLCJ0IiwiZGVlcEVxdWFsIiwibGVuZ3RoIiwiaGVhZCIsInVuZGVmaW5lZCIsImhlYWRyZWZlcmVuY2UiLCJwb3ByZWZlcmVuY2UiLCJkZWwiXSwibWFwcGluZ3MiOiI7Ozs7OztRQUdnQkEsSSxHQUFBQSxJOztBQUhoQjs7QUFDQTs7QUFFTyxTQUFTQSxJQUFULENBQWdCQyxLQUFoQixFQUF1QkMsUUFBdkIsRUFBaUNDLElBQWpDLEVBQXVDQyxRQUF2QyxFQUFpREMsSUFBakQsRUFBdURDLENBQXZELEVBQTJEOztBQUVqRSxLQUFNQywwQkFBd0JMLFFBQXhCLFVBQXFDRSxRQUFyQyxVQUFrREUsQ0FBbEQsTUFBTjs7QUFFQUwsT0FBT00sS0FBUCxFQUFjLGFBQUs7O0FBRWxCLE1BQUlDLENBQUosRUFBT0MsQ0FBUCxFQUFVQyxTQUFWLEVBQXFCQyxVQUFyQixFQUFpQ0MsQ0FBakMsRUFBb0NDLENBQXBDLEVBQXVDQyxDQUF2Qzs7QUFFQU4sTUFBSUwsS0FBTUUsSUFBTixDQUFKO0FBQ0FJLE1BQUksRUFBSjtBQUNBSyxNQUFJLEVBQUo7QUFDQUgsZUFBYSxFQUFiOztBQUVBQyxNQUFJTixDQUFKO0FBQ0EsU0FBUU0sR0FBUixFQUFjO0FBQ2JDLE9BQUlFLEtBQUtDLE1BQUwsRUFBSjtBQUNBTixlQUFZRixFQUFFUyxJQUFGLENBQVFKLENBQVIsQ0FBWjtBQUNBRixjQUFXTSxJQUFYLENBQWlCUCxTQUFqQjtBQUNBRCxLQUFFUSxJQUFGLENBQVFKLENBQVI7QUFDQTs7QUFFRCxpQ0FBU0YsVUFBVCxFQUFxQixDQUFyQixFQUF3QkwsQ0FBeEI7O0FBRUEsT0FBTU0sSUFBSSxDQUFWLEVBQWNBLElBQUlOLElBQUksQ0FBdEIsRUFBMEIsRUFBRU0sQ0FBNUIsRUFBZ0M7O0FBRS9CRSxLQUFFRyxJQUFGLENBQVFOLFdBQVdDLENBQVgsRUFBY00sS0FBdEI7QUFDQVYsS0FBRVcsTUFBRixDQUFVUixXQUFXQyxDQUFYLENBQVY7QUFFQTs7QUFFRCxTQUFRQSxJQUFJTixDQUFaLEVBQWdCLEVBQUVNLENBQWxCLEVBQXNCOztBQUVyQkUsS0FBRUcsSUFBRixDQUFRVCxFQUFFWSxHQUFGLEVBQVI7QUFFQTs7QUFFRFgsSUFBRVksSUFBRixDQUFRaEIsSUFBUjtBQUNBUyxJQUFFTyxJQUFGLENBQVFoQixJQUFSOztBQUVBaUIsSUFBRUMsU0FBRixDQUFhVCxDQUFiLEVBQWdCTCxDQUFoQixFQUFtQixpQkFBbkI7O0FBRUFhLElBQUVDLFNBQUYsQ0FBYWYsRUFBRWdCLE1BQWYsRUFBdUIsQ0FBdkIsRUFBMEIsb0JBQTFCOztBQUVBRixJQUFFQyxTQUFGLENBQWFmLEVBQUVpQixJQUFGLEVBQWIsRUFBdUJDLFNBQXZCLEVBQWtDLGtCQUFsQztBQUNBSixJQUFFQyxTQUFGLENBQWFmLEVBQUVtQixhQUFGLEVBQWIsRUFBZ0MsSUFBaEMsRUFBc0MsMkJBQXRDO0FBQ0FMLElBQUVDLFNBQUYsQ0FBYWYsRUFBRVksR0FBRixFQUFiLEVBQXNCTSxTQUF0QixFQUFpQyxpQkFBakM7QUFDQUosSUFBRUMsU0FBRixDQUFhZixFQUFFb0IsWUFBRixFQUFiLEVBQStCLElBQS9CLEVBQXFDLDBCQUFyQztBQUVBLEVBNUNEO0FBOENBOztBQUVNLElBQU1DLG9CQUFNLG9CQUFRN0IsSUFBUixDQUFaIiwiZmlsZSI6ImRlbGV0ZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHRlc3RlciB9IGZyb20gJy4uL3Rlc3RlcicgO1xuaW1wb3J0IHsgc2h1ZmZsZSB9IGZyb20gJ2F1cmVvb21zLWpzLXJhbmRvbScgO1xuXG5leHBvcnQgZnVuY3Rpb24gX2RlbCAoIF90ZXN0LCBoZWFwbmFtZSwgSGVhcCwgZGlmZm5hbWUsIGRpZmYsIG4gKSB7XG5cblx0Y29uc3QgdGl0bGUgPSBgSGVhcCBkZWxldGUgKCR7aGVhcG5hbWV9LCAke2RpZmZuYW1lfSwgJHtufSlgO1xuXG5cdF90ZXN0KCB0aXRsZSwgdCA9PiB7XG5cblx0XHR2YXIgcSwgYSwgcmVmZXJlbmNlLCByZWZlcmVuY2VzLCBpLCB4LCBiO1xuXG5cdFx0cSA9IEhlYXAoIGRpZmYgKTtcblx0XHRhID0gW107XG5cdFx0YiA9IFtdO1xuXHRcdHJlZmVyZW5jZXMgPSBbXTtcblxuXHRcdGkgPSBuO1xuXHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0eCA9IE1hdGgucmFuZG9tKCk7XG5cdFx0XHRyZWZlcmVuY2UgPSBxLnB1c2goIHggKTtcblx0XHRcdHJlZmVyZW5jZXMucHVzaCggcmVmZXJlbmNlICk7XG5cdFx0XHRhLnB1c2goIHggKTtcblx0XHR9XG5cblx0XHRzaHVmZmxlKCByZWZlcmVuY2VzLCAwLCBuICk7XG5cblx0XHRmb3IgKCBpID0gMCA7IGkgPCBuIC8gMiA7ICsraSApIHtcblxuXHRcdFx0Yi5wdXNoKCByZWZlcmVuY2VzW2ldLnZhbHVlICk7XG5cdFx0XHRxLmRlbGV0ZSggcmVmZXJlbmNlc1tpXSApO1xuXG5cdFx0fVxuXG5cdFx0Zm9yICggOyBpIDwgbiA7ICsraSApIHtcblxuXHRcdFx0Yi5wdXNoKCBxLnBvcCgpICk7XG5cblx0XHR9XG5cblx0XHRhLnNvcnQoIGRpZmYgKTtcblx0XHRiLnNvcnQoIGRpZmYgKTtcblxuXHRcdHQuZGVlcEVxdWFsKCBiLCBhLCBcImNoZWNrIGlkZW50aWNhbFwiICk7XG5cblx0XHR0LmRlZXBFcXVhbCggcS5sZW5ndGgsIDAsIFwiY2hlY2sgbGVuZ3RoIGVtcHR5XCIgKTtcblxuXHRcdHQuZGVlcEVxdWFsKCBxLmhlYWQoKSwgdW5kZWZpbmVkLCBcImNoZWNrIGhlYWQgZW1wdHlcIiApO1xuXHRcdHQuZGVlcEVxdWFsKCBxLmhlYWRyZWZlcmVuY2UoKSwgbnVsbCwgXCJjaGVjayBoZWFkcmVmZXJlbmNlIGVtcHR5XCIgKTtcblx0XHR0LmRlZXBFcXVhbCggcS5wb3AoKSwgdW5kZWZpbmVkLCBcImNoZWNrIHBvcCBlbXB0eVwiICk7XG5cdFx0dC5kZWVwRXF1YWwoIHEucG9wcmVmZXJlbmNlKCksIG51bGwsIFwiY2hlY2sgcG9wcmVmZXJlbmNlIGVtcHR5XCIgKTtcblxuXHR9KTtcblxufVxuXG5leHBvcnQgY29uc3QgZGVsID0gdGVzdGVyKCBfZGVsICkgO1xuIl19
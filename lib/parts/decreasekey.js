'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.decreasekey = undefined;
exports._decreasekey = _decreasekey;

var _tester = require('../tester');

var _aureoomsJsRandom = require('aureooms-js-random');

function _decreasekey(_test, heapname, Heap, diffname, diff, n) {

	var title = 'Heap decreasekey (' + heapname + ', ' + diffname + ', ' + n + ')';

	_test(title, function (t) {

		var q, a, reference, references, i, x, b;

		q = Heap(diff);
		a = [];
		b = [];
		references = [];

		i = n;
		while (i--) {
			x = Math.random();
			reference = q.push(x);
			references.push(reference);
			a.push(x);
		}

		(0, _aureoomsJsRandom.shuffle)(references, 0, n);

		for (i = 0; i < n; ++i) {

			a[i] -= Math.random();
			q.decreasekey(references[i], a[i]);
		}

		i = n;

		while (i--) {

			b.push(q.pop());
		}

		a.sort(diff);
		b.sort(diff);

		t.deepEqual(b, a, "check identical");

		t.deepEqual(q.length, 0, "check length empty");

		t.deepEqual(q.head(), undefined, "check head empty");
		t.deepEqual(q.headreference(), null, "check headreference empty");
		t.deepEqual(q.pop(), undefined, "check pop empty");
		t.deepEqual(q.popreference(), null, "check popreference empty");
	});
}

var decreasekey = exports.decreasekey = (0, _tester.tester)(_decreasekey);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wYXJ0cy9kZWNyZWFzZWtleS5qcyJdLCJuYW1lcyI6WyJfZGVjcmVhc2VrZXkiLCJfdGVzdCIsImhlYXBuYW1lIiwiSGVhcCIsImRpZmZuYW1lIiwiZGlmZiIsIm4iLCJ0aXRsZSIsInEiLCJhIiwicmVmZXJlbmNlIiwicmVmZXJlbmNlcyIsImkiLCJ4IiwiYiIsIk1hdGgiLCJyYW5kb20iLCJwdXNoIiwiZGVjcmVhc2VrZXkiLCJwb3AiLCJzb3J0IiwidCIsImRlZXBFcXVhbCIsImxlbmd0aCIsImhlYWQiLCJ1bmRlZmluZWQiLCJoZWFkcmVmZXJlbmNlIiwicG9wcmVmZXJlbmNlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7UUFHZ0JBLFksR0FBQUEsWTs7QUFIaEI7O0FBQ0E7O0FBRU8sU0FBU0EsWUFBVCxDQUF3QkMsS0FBeEIsRUFBK0JDLFFBQS9CLEVBQXlDQyxJQUF6QyxFQUErQ0MsUUFBL0MsRUFBeURDLElBQXpELEVBQStEQyxDQUEvRCxFQUFtRTs7QUFFekUsS0FBTUMsK0JBQTZCTCxRQUE3QixVQUEwQ0UsUUFBMUMsVUFBdURFLENBQXZELE1BQU47O0FBRUFMLE9BQU9NLEtBQVAsRUFBYyxhQUFLOztBQUVsQixNQUFJQyxDQUFKLEVBQU9DLENBQVAsRUFBVUMsU0FBVixFQUFxQkMsVUFBckIsRUFBaUNDLENBQWpDLEVBQW9DQyxDQUFwQyxFQUF1Q0MsQ0FBdkM7O0FBRUFOLE1BQUlMLEtBQU1FLElBQU4sQ0FBSjtBQUNBSSxNQUFJLEVBQUo7QUFDQUssTUFBSSxFQUFKO0FBQ0FILGVBQWEsRUFBYjs7QUFFQUMsTUFBSU4sQ0FBSjtBQUNBLFNBQVFNLEdBQVIsRUFBYztBQUNiQyxPQUFJRSxLQUFLQyxNQUFMLEVBQUo7QUFDQU4sZUFBWUYsRUFBRVMsSUFBRixDQUFRSixDQUFSLENBQVo7QUFDQUYsY0FBV00sSUFBWCxDQUFpQlAsU0FBakI7QUFDQUQsS0FBRVEsSUFBRixDQUFRSixDQUFSO0FBQ0E7O0FBRUQsaUNBQVNGLFVBQVQsRUFBcUIsQ0FBckIsRUFBd0JMLENBQXhCOztBQUVBLE9BQU1NLElBQUksQ0FBVixFQUFjQSxJQUFJTixDQUFsQixFQUFzQixFQUFFTSxDQUF4QixFQUE0Qjs7QUFFM0JILEtBQUVHLENBQUYsS0FBUUcsS0FBS0MsTUFBTCxFQUFSO0FBQ0FSLEtBQUVVLFdBQUYsQ0FBZVAsV0FBV0MsQ0FBWCxDQUFmLEVBQThCSCxFQUFFRyxDQUFGLENBQTlCO0FBRUE7O0FBRURBLE1BQUlOLENBQUo7O0FBRUEsU0FBUU0sR0FBUixFQUFjOztBQUViRSxLQUFFRyxJQUFGLENBQVFULEVBQUVXLEdBQUYsRUFBUjtBQUVBOztBQUVEVixJQUFFVyxJQUFGLENBQVFmLElBQVI7QUFDQVMsSUFBRU0sSUFBRixDQUFRZixJQUFSOztBQUVBZ0IsSUFBRUMsU0FBRixDQUFhUixDQUFiLEVBQWdCTCxDQUFoQixFQUFtQixpQkFBbkI7O0FBRUFZLElBQUVDLFNBQUYsQ0FBYWQsRUFBRWUsTUFBZixFQUF1QixDQUF2QixFQUEwQixvQkFBMUI7O0FBRUFGLElBQUVDLFNBQUYsQ0FBYWQsRUFBRWdCLElBQUYsRUFBYixFQUF1QkMsU0FBdkIsRUFBa0Msa0JBQWxDO0FBQ0FKLElBQUVDLFNBQUYsQ0FBYWQsRUFBRWtCLGFBQUYsRUFBYixFQUFnQyxJQUFoQyxFQUFzQywyQkFBdEM7QUFDQUwsSUFBRUMsU0FBRixDQUFhZCxFQUFFVyxHQUFGLEVBQWIsRUFBc0JNLFNBQXRCLEVBQWlDLGlCQUFqQztBQUNBSixJQUFFQyxTQUFGLENBQWFkLEVBQUVtQixZQUFGLEVBQWIsRUFBK0IsSUFBL0IsRUFBcUMsMEJBQXJDO0FBRUEsRUE5Q0Q7QUFnREE7O0FBRU0sSUFBTVQsb0NBQWMsb0JBQVFsQixZQUFSLENBQXBCIiwiZmlsZSI6ImRlY3JlYXNla2V5LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdGVzdGVyIH0gZnJvbSAnLi4vdGVzdGVyJyA7XG5pbXBvcnQgeyBzaHVmZmxlIH0gZnJvbSAnYXVyZW9vbXMtanMtcmFuZG9tJyA7XG5cbmV4cG9ydCBmdW5jdGlvbiBfZGVjcmVhc2VrZXkgKCBfdGVzdCwgaGVhcG5hbWUsIEhlYXAsIGRpZmZuYW1lLCBkaWZmLCBuICkge1xuXG5cdGNvbnN0IHRpdGxlID0gYEhlYXAgZGVjcmVhc2VrZXkgKCR7aGVhcG5hbWV9LCAke2RpZmZuYW1lfSwgJHtufSlgO1xuXG5cdF90ZXN0KCB0aXRsZSwgdCA9PiB7XG5cblx0XHR2YXIgcSwgYSwgcmVmZXJlbmNlLCByZWZlcmVuY2VzLCBpLCB4LCBiO1xuXG5cdFx0cSA9IEhlYXAoIGRpZmYgKTtcblx0XHRhID0gW107XG5cdFx0YiA9IFtdO1xuXHRcdHJlZmVyZW5jZXMgPSBbXTtcblxuXHRcdGkgPSBuO1xuXHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0eCA9IE1hdGgucmFuZG9tKCk7XG5cdFx0XHRyZWZlcmVuY2UgPSBxLnB1c2goIHggKTtcblx0XHRcdHJlZmVyZW5jZXMucHVzaCggcmVmZXJlbmNlICk7XG5cdFx0XHRhLnB1c2goIHggKTtcblx0XHR9XG5cblx0XHRzaHVmZmxlKCByZWZlcmVuY2VzLCAwLCBuICk7XG5cblx0XHRmb3IgKCBpID0gMCA7IGkgPCBuIDsgKytpICkge1xuXG5cdFx0XHRhW2ldIC09IE1hdGgucmFuZG9tKCk7XG5cdFx0XHRxLmRlY3JlYXNla2V5KCByZWZlcmVuY2VzW2ldLCBhW2ldICk7XG5cblx0XHR9XG5cblx0XHRpID0gbjtcblxuXHRcdHdoaWxlICggaS0tICkge1xuXG5cdFx0XHRiLnB1c2goIHEucG9wKCkgKTtcblxuXHRcdH1cblxuXHRcdGEuc29ydCggZGlmZiApO1xuXHRcdGIuc29ydCggZGlmZiApO1xuXG5cdFx0dC5kZWVwRXF1YWwoIGIsIGEsIFwiY2hlY2sgaWRlbnRpY2FsXCIgKTtcblxuXHRcdHQuZGVlcEVxdWFsKCBxLmxlbmd0aCwgMCwgXCJjaGVjayBsZW5ndGggZW1wdHlcIiApO1xuXG5cdFx0dC5kZWVwRXF1YWwoIHEuaGVhZCgpLCB1bmRlZmluZWQsIFwiY2hlY2sgaGVhZCBlbXB0eVwiICk7XG5cdFx0dC5kZWVwRXF1YWwoIHEuaGVhZHJlZmVyZW5jZSgpLCBudWxsLCBcImNoZWNrIGhlYWRyZWZlcmVuY2UgZW1wdHlcIiApO1xuXHRcdHQuZGVlcEVxdWFsKCBxLnBvcCgpLCB1bmRlZmluZWQsIFwiY2hlY2sgcG9wIGVtcHR5XCIgKTtcblx0XHR0LmRlZXBFcXVhbCggcS5wb3ByZWZlcmVuY2UoKSwgbnVsbCwgXCJjaGVjayBwb3ByZWZlcmVuY2UgZW1wdHlcIiApO1xuXG5cdH0pO1xuXG59XG5cbmV4cG9ydCBjb25zdCBkZWNyZWFzZWtleSA9IHRlc3RlciggX2RlY3JlYXNla2V5ICkgO1xuIl19
"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.DummyHeap = DummyHeap;
function DummyHeap(compare) {

	this.compare = function (a, b) {
		return compare(a.value, b.value);
	};
	this.array = [];
	this.length = 0;
}

DummyHeap.Reference = function (value) {
	this.value = value;
};

DummyHeap.prototype.head = function () {

	if (this.length === 0) return undefined;

	return this.array[0].value;
};

DummyHeap.prototype.headreference = function () {

	if (this.length === 0) return null;

	return this.array[0];
};

DummyHeap.prototype.pop = function () {

	if (this.length === 0) return undefined;

	--this.length;
	return this.array.shift().value;
};

DummyHeap.prototype.popreference = function () {

	if (this.length === 0) return null;

	--this.length;
	return this.array.shift();
};

DummyHeap.prototype.push = function (value) {

	var reference = new DummyHeap.Reference(value);

	this.pushreference(reference);

	return reference;
};

DummyHeap.prototype.pushreference = function (reference) {

	this.array.push(reference);

	this.array.sort(this.compare);

	++this.length;
};

DummyHeap.prototype.merge = function (other) {

	this.array = this.array.concat(other.array).sort(this.compare);

	this.length += other.length;
};

DummyHeap.prototype.update = function (reference, value) {

	reference.value = value;

	this.array.sort(this.compare);
};

DummyHeap.prototype.decreasekey = DummyHeap.prototype.update;

DummyHeap.prototype.increasekey = DummyHeap.prototype.update;

DummyHeap.prototype.delete = function (reference) {

	this.array.splice(this.array.indexOf(reference), 1);
	--this.length;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9hZHQvRHVtbXlIZWFwLmpzIl0sIm5hbWVzIjpbIkR1bW15SGVhcCIsImNvbXBhcmUiLCJhIiwiYiIsInZhbHVlIiwiYXJyYXkiLCJsZW5ndGgiLCJSZWZlcmVuY2UiLCJwcm90b3R5cGUiLCJoZWFkIiwidW5kZWZpbmVkIiwiaGVhZHJlZmVyZW5jZSIsInBvcCIsInNoaWZ0IiwicG9wcmVmZXJlbmNlIiwicHVzaCIsInJlZmVyZW5jZSIsInB1c2hyZWZlcmVuY2UiLCJzb3J0IiwibWVyZ2UiLCJvdGhlciIsImNvbmNhdCIsInVwZGF0ZSIsImRlY3JlYXNla2V5IiwiaW5jcmVhc2VrZXkiLCJkZWxldGUiLCJzcGxpY2UiLCJpbmRleE9mIl0sIm1hcHBpbmdzIjoiOzs7OztRQUVnQkEsUyxHQUFBQSxTO0FBQVQsU0FBU0EsU0FBVCxDQUFxQkMsT0FBckIsRUFBK0I7O0FBRXJDLE1BQUtBLE9BQUwsR0FBZSxVQUFXQyxDQUFYLEVBQWVDLENBQWYsRUFBbUI7QUFBRSxTQUFPRixRQUFTQyxFQUFFRSxLQUFYLEVBQW1CRCxFQUFFQyxLQUFyQixDQUFQO0FBQXVDLEVBQTNFO0FBQ0EsTUFBS0MsS0FBTCxHQUFhLEVBQWI7QUFDQSxNQUFLQyxNQUFMLEdBQWMsQ0FBZDtBQUVBOztBQUVETixVQUFVTyxTQUFWLEdBQXNCLFVBQVdILEtBQVgsRUFBbUI7QUFBRSxNQUFLQSxLQUFMLEdBQWFBLEtBQWI7QUFBc0IsQ0FBakU7O0FBRUFKLFVBQVVRLFNBQVYsQ0FBb0JDLElBQXBCLEdBQTJCLFlBQVk7O0FBRXRDLEtBQUssS0FBS0gsTUFBTCxLQUFnQixDQUFyQixFQUF5QixPQUFPSSxTQUFQOztBQUV6QixRQUFPLEtBQUtMLEtBQUwsQ0FBVyxDQUFYLEVBQWNELEtBQXJCO0FBRUEsQ0FORDs7QUFTQUosVUFBVVEsU0FBVixDQUFvQkcsYUFBcEIsR0FBb0MsWUFBWTs7QUFFL0MsS0FBSyxLQUFLTCxNQUFMLEtBQWdCLENBQXJCLEVBQXlCLE9BQU8sSUFBUDs7QUFFekIsUUFBTyxLQUFLRCxLQUFMLENBQVcsQ0FBWCxDQUFQO0FBRUEsQ0FORDs7QUFTQUwsVUFBVVEsU0FBVixDQUFvQkksR0FBcEIsR0FBMEIsWUFBWTs7QUFFckMsS0FBSyxLQUFLTixNQUFMLEtBQWdCLENBQXJCLEVBQXlCLE9BQU9JLFNBQVA7O0FBRXpCLEdBQUUsS0FBS0osTUFBUDtBQUNBLFFBQU8sS0FBS0QsS0FBTCxDQUFXUSxLQUFYLEdBQW9CVCxLQUEzQjtBQUVBLENBUEQ7O0FBVUFKLFVBQVVRLFNBQVYsQ0FBb0JNLFlBQXBCLEdBQW1DLFlBQVk7O0FBRTlDLEtBQUssS0FBS1IsTUFBTCxLQUFnQixDQUFyQixFQUF5QixPQUFPLElBQVA7O0FBRXpCLEdBQUUsS0FBS0EsTUFBUDtBQUNBLFFBQU8sS0FBS0QsS0FBTCxDQUFXUSxLQUFYLEVBQVA7QUFFQSxDQVBEOztBQVVBYixVQUFVUSxTQUFWLENBQW9CTyxJQUFwQixHQUEyQixVQUFXWCxLQUFYLEVBQW1COztBQUU3QyxLQUFJWSxZQUFZLElBQUloQixVQUFVTyxTQUFkLENBQXlCSCxLQUF6QixDQUFoQjs7QUFFQSxNQUFLYSxhQUFMLENBQW9CRCxTQUFwQjs7QUFFQSxRQUFPQSxTQUFQO0FBRUEsQ0FSRDs7QUFXQWhCLFVBQVVRLFNBQVYsQ0FBb0JTLGFBQXBCLEdBQW9DLFVBQVdELFNBQVgsRUFBdUI7O0FBRTFELE1BQUtYLEtBQUwsQ0FBV1UsSUFBWCxDQUFpQkMsU0FBakI7O0FBRUEsTUFBS1gsS0FBTCxDQUFXYSxJQUFYLENBQWlCLEtBQUtqQixPQUF0Qjs7QUFFQSxHQUFFLEtBQUtLLE1BQVA7QUFFQSxDQVJEOztBQVdBTixVQUFVUSxTQUFWLENBQW9CVyxLQUFwQixHQUE0QixVQUFXQyxLQUFYLEVBQW1COztBQUU5QyxNQUFLZixLQUFMLEdBQWEsS0FBS0EsS0FBTCxDQUFXZ0IsTUFBWCxDQUFtQkQsTUFBTWYsS0FBekIsRUFBaUNhLElBQWpDLENBQXVDLEtBQUtqQixPQUE1QyxDQUFiOztBQUVBLE1BQUtLLE1BQUwsSUFBZWMsTUFBTWQsTUFBckI7QUFFQSxDQU5EOztBQVNBTixVQUFVUSxTQUFWLENBQW9CYyxNQUFwQixHQUE2QixVQUFXTixTQUFYLEVBQXNCWixLQUF0QixFQUE4Qjs7QUFFMURZLFdBQVVaLEtBQVYsR0FBa0JBLEtBQWxCOztBQUVBLE1BQUtDLEtBQUwsQ0FBV2EsSUFBWCxDQUFpQixLQUFLakIsT0FBdEI7QUFFQSxDQU5EOztBQVFBRCxVQUFVUSxTQUFWLENBQW9CZSxXQUFwQixHQUFrQ3ZCLFVBQVVRLFNBQVYsQ0FBb0JjLE1BQXREOztBQUVBdEIsVUFBVVEsU0FBVixDQUFvQmdCLFdBQXBCLEdBQWtDeEIsVUFBVVEsU0FBVixDQUFvQmMsTUFBdEQ7O0FBRUF0QixVQUFVUSxTQUFWLENBQW9CaUIsTUFBcEIsR0FBNkIsVUFBV1QsU0FBWCxFQUF1Qjs7QUFFbkQsTUFBS1gsS0FBTCxDQUFXcUIsTUFBWCxDQUFtQixLQUFLckIsS0FBTCxDQUFXc0IsT0FBWCxDQUFvQlgsU0FBcEIsQ0FBbkIsRUFBcUQsQ0FBckQ7QUFDQSxHQUFFLEtBQUtWLE1BQVA7QUFFQSxDQUxEIiwiZmlsZSI6IkR1bW15SGVhcC5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxuXG5leHBvcnQgZnVuY3Rpb24gRHVtbXlIZWFwICggY29tcGFyZSApIHtcblxuXHR0aGlzLmNvbXBhcmUgPSBmdW5jdGlvbiAoIGEgLCBiICkgeyByZXR1cm4gY29tcGFyZSggYS52YWx1ZSAsIGIudmFsdWUgKSA7IH0gO1xuXHR0aGlzLmFycmF5ID0gWyBdIDtcblx0dGhpcy5sZW5ndGggPSAwIDtcblxufVxuXG5EdW1teUhlYXAuUmVmZXJlbmNlID0gZnVuY3Rpb24gKCB2YWx1ZSApIHsgdGhpcy52YWx1ZSA9IHZhbHVlIDsgfSA7XG5cbkR1bW15SGVhcC5wcm90b3R5cGUuaGVhZCA9IGZ1bmN0aW9uICgpIHtcblxuXHRpZiAoIHRoaXMubGVuZ3RoID09PSAwICkgcmV0dXJuIHVuZGVmaW5lZDtcblxuXHRyZXR1cm4gdGhpcy5hcnJheVswXS52YWx1ZTtcblxufTtcblxuXG5EdW1teUhlYXAucHJvdG90eXBlLmhlYWRyZWZlcmVuY2UgPSBmdW5jdGlvbiAoKSB7XG5cblx0aWYgKCB0aGlzLmxlbmd0aCA9PT0gMCApIHJldHVybiBudWxsO1xuXG5cdHJldHVybiB0aGlzLmFycmF5WzBdO1xuXG59O1xuXG5cbkR1bW15SGVhcC5wcm90b3R5cGUucG9wID0gZnVuY3Rpb24gKCkge1xuXG5cdGlmICggdGhpcy5sZW5ndGggPT09IDAgKSByZXR1cm4gdW5kZWZpbmVkO1xuXG5cdC0tdGhpcy5sZW5ndGggO1xuXHRyZXR1cm4gdGhpcy5hcnJheS5zaGlmdCggKS52YWx1ZSA7XG5cbn07XG5cblxuRHVtbXlIZWFwLnByb3RvdHlwZS5wb3ByZWZlcmVuY2UgPSBmdW5jdGlvbiAoKSB7XG5cblx0aWYgKCB0aGlzLmxlbmd0aCA9PT0gMCApIHJldHVybiBudWxsIDtcblxuXHQtLXRoaXMubGVuZ3RoIDtcblx0cmV0dXJuIHRoaXMuYXJyYXkuc2hpZnQoICkgO1xuXG59O1xuXG5cbkR1bW15SGVhcC5wcm90b3R5cGUucHVzaCA9IGZ1bmN0aW9uICggdmFsdWUgKSB7XG5cblx0dmFyIHJlZmVyZW5jZSA9IG5ldyBEdW1teUhlYXAuUmVmZXJlbmNlKCB2YWx1ZSApIDtcblxuXHR0aGlzLnB1c2hyZWZlcmVuY2UoIHJlZmVyZW5jZSApIDtcblxuXHRyZXR1cm4gcmVmZXJlbmNlIDtcblxufTtcblxuXG5EdW1teUhlYXAucHJvdG90eXBlLnB1c2hyZWZlcmVuY2UgPSBmdW5jdGlvbiAoIHJlZmVyZW5jZSApIHtcblxuXHR0aGlzLmFycmF5LnB1c2goIHJlZmVyZW5jZSApIDtcblxuXHR0aGlzLmFycmF5LnNvcnQoIHRoaXMuY29tcGFyZSApIDtcblxuXHQrK3RoaXMubGVuZ3RoO1xuXG59O1xuXG5cbkR1bW15SGVhcC5wcm90b3R5cGUubWVyZ2UgPSBmdW5jdGlvbiAoIG90aGVyICkge1xuXG5cdHRoaXMuYXJyYXkgPSB0aGlzLmFycmF5LmNvbmNhdCggb3RoZXIuYXJyYXkgKS5zb3J0KCB0aGlzLmNvbXBhcmUgKSA7XG5cblx0dGhpcy5sZW5ndGggKz0gb3RoZXIubGVuZ3RoO1xuXG59IDtcblxuXG5EdW1teUhlYXAucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uICggcmVmZXJlbmNlLCB2YWx1ZSApIHtcblxuXHRyZWZlcmVuY2UudmFsdWUgPSB2YWx1ZSA7XG5cblx0dGhpcy5hcnJheS5zb3J0KCB0aGlzLmNvbXBhcmUgKSA7XG5cbn07XG5cbkR1bW15SGVhcC5wcm90b3R5cGUuZGVjcmVhc2VrZXkgPSBEdW1teUhlYXAucHJvdG90eXBlLnVwZGF0ZSA7XG5cbkR1bW15SGVhcC5wcm90b3R5cGUuaW5jcmVhc2VrZXkgPSBEdW1teUhlYXAucHJvdG90eXBlLnVwZGF0ZSA7XG5cbkR1bW15SGVhcC5wcm90b3R5cGUuZGVsZXRlID0gZnVuY3Rpb24gKCByZWZlcmVuY2UgKSB7XG5cblx0dGhpcy5hcnJheS5zcGxpY2UoIHRoaXMuYXJyYXkuaW5kZXhPZiggcmVmZXJlbmNlICkgLCAxICkgO1xuXHQtLXRoaXMubGVuZ3RoIDtcblxufTtcbiJdfQ==
'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.tester = tester;
exports.tester2 = tester2;

var _jsCompare = require('@aureooms/js-compare');

var _jsItertools = require('@aureooms/js-itertools');

var _jsFunctools = require('@aureooms/js-functools');

var _jsFunctools2 = _interopRequireDefault(_jsFunctools);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function tester(method) {

	return function (_test, length, heaps) {

		(0, _jsItertools.exhaust)((0, _jsItertools.map)(_jsFunctools2.default.chain([_jsItertools.chain, _jsItertools.list, _jsFunctools2.default.partial(_jsFunctools2.default.star, [method])]), (0, _jsItertools.product)([[[_test, length]], heaps, [["increasing", _jsCompare.increasing], ["decreasing", _jsCompare.decreasing]], [[1], [16], [17], [31], [32], [33], [63], [64], [65]]], 1)));
	};
}

function tester2(method) {

	return function (_test, length, heaps) {

		(0, _jsItertools.exhaust)((0, _jsItertools.map)(_jsFunctools2.default.chain([_jsItertools.chain, _jsItertools.list, _jsFunctools2.default.partial(_jsFunctools2.default.star, [method])]), (0, _jsItertools.product)([[[_test, length]], heaps, [["increasing", _jsCompare.increasing], ["decreasing", _jsCompare.decreasing]], [[1], [16], [17], [31], [32], [33], [63], [64], [65]], [[1], [16], [17], [31], [32], [33], [63], [64], [65]]], 1)));
	};
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy90ZXN0ZXIuanMiXSwibmFtZXMiOlsidGVzdGVyIiwidGVzdGVyMiIsIm1ldGhvZCIsIl90ZXN0IiwibGVuZ3RoIiwiaGVhcHMiLCJjaGFpbiIsInBhcnRpYWwiLCJzdGFyIl0sIm1hcHBpbmdzIjoiOzs7OztRQUlnQkEsTSxHQUFBQSxNO1FBeUJBQyxPLEdBQUFBLE87O0FBN0JoQjs7QUFDQTs7QUFDQTs7Ozs7O0FBRU8sU0FBU0QsTUFBVCxDQUFrQkUsTUFBbEIsRUFBMkI7O0FBRWpDLFFBQU8sVUFBVUMsS0FBVixFQUFrQkMsTUFBbEIsRUFBMkJDLEtBQTNCLEVBQW1DOztBQUV6Qyw0QkFBUyxzQkFDUixzQkFBVUMsS0FBVixDQUFpQix3Q0FBaUIsc0JBQVVDLE9BQVYsQ0FBbUIsc0JBQVVDLElBQTdCLEVBQW9DLENBQUVOLE1BQUYsQ0FBcEMsQ0FBakIsQ0FBakIsQ0FEUSxFQUVSLDBCQUFTLENBRVIsQ0FBQyxDQUFDQyxLQUFELEVBQVFDLE1BQVIsQ0FBRCxDQUZRLEVBSVJDLEtBSlEsRUFNUixDQUNDLENBQUMsWUFBRCx3QkFERCxFQUVDLENBQUMsWUFBRCx3QkFGRCxDQU5RLEVBV1IsQ0FBQyxDQUFDLENBQUQsQ0FBRCxFQUFNLENBQUMsRUFBRCxDQUFOLEVBQVksQ0FBQyxFQUFELENBQVosRUFBa0IsQ0FBQyxFQUFELENBQWxCLEVBQXdCLENBQUMsRUFBRCxDQUF4QixFQUE4QixDQUFDLEVBQUQsQ0FBOUIsRUFBb0MsQ0FBQyxFQUFELENBQXBDLEVBQTBDLENBQUMsRUFBRCxDQUExQyxFQUFnRCxDQUFDLEVBQUQsQ0FBaEQsQ0FYUSxDQUFULEVBYUcsQ0FiSCxDQUZRLENBQVQ7QUFrQkEsRUFwQkQ7QUFxQkE7O0FBRU0sU0FBU0osT0FBVCxDQUFtQkMsTUFBbkIsRUFBNEI7O0FBRWxDLFFBQU8sVUFBVUMsS0FBVixFQUFrQkMsTUFBbEIsRUFBMkJDLEtBQTNCLEVBQW1DOztBQUV6Qyw0QkFBUyxzQkFDUixzQkFBVUMsS0FBVixDQUFpQix3Q0FBaUIsc0JBQVVDLE9BQVYsQ0FBbUIsc0JBQVVDLElBQTdCLEVBQW9DLENBQUVOLE1BQUYsQ0FBcEMsQ0FBakIsQ0FBakIsQ0FEUSxFQUVSLDBCQUFTLENBRVIsQ0FBQyxDQUFDQyxLQUFELEVBQVFDLE1BQVIsQ0FBRCxDQUZRLEVBSVJDLEtBSlEsRUFNUixDQUNDLENBQUMsWUFBRCx3QkFERCxFQUVDLENBQUMsWUFBRCx3QkFGRCxDQU5RLEVBV1IsQ0FBQyxDQUFDLENBQUQsQ0FBRCxFQUFNLENBQUMsRUFBRCxDQUFOLEVBQVksQ0FBQyxFQUFELENBQVosRUFBa0IsQ0FBQyxFQUFELENBQWxCLEVBQXdCLENBQUMsRUFBRCxDQUF4QixFQUE4QixDQUFDLEVBQUQsQ0FBOUIsRUFBb0MsQ0FBQyxFQUFELENBQXBDLEVBQTBDLENBQUMsRUFBRCxDQUExQyxFQUFnRCxDQUFDLEVBQUQsQ0FBaEQsQ0FYUSxFQVlSLENBQUMsQ0FBQyxDQUFELENBQUQsRUFBTSxDQUFDLEVBQUQsQ0FBTixFQUFZLENBQUMsRUFBRCxDQUFaLEVBQWtCLENBQUMsRUFBRCxDQUFsQixFQUF3QixDQUFDLEVBQUQsQ0FBeEIsRUFBOEIsQ0FBQyxFQUFELENBQTlCLEVBQW9DLENBQUMsRUFBRCxDQUFwQyxFQUEwQyxDQUFDLEVBQUQsQ0FBMUMsRUFBZ0QsQ0FBQyxFQUFELENBQWhELENBWlEsQ0FBVCxFQWNHLENBZEgsQ0FGUSxDQUFUO0FBbUJBLEVBckJEO0FBc0JBIiwiZmlsZSI6InRlc3Rlci5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGluY3JlYXNpbmcgLCBkZWNyZWFzaW5nIH0gZnJvbSAnQGF1cmVvb21zL2pzLWNvbXBhcmUnIDtcbmltcG9ydCB7IG1hcCAsIGNoYWluICwgbGlzdCAsIHByb2R1Y3QgLCBleGhhdXN0IH0gZnJvbSAnQGF1cmVvb21zL2pzLWl0ZXJ0b29scycgO1xuaW1wb3J0IGZ1bmN0b29scyBmcm9tICdAYXVyZW9vbXMvanMtZnVuY3Rvb2xzJyA7XG5cbmV4cG9ydCBmdW5jdGlvbiB0ZXN0ZXIgKCBtZXRob2QgKSB7XG5cblx0cmV0dXJuIGZ1bmN0aW9uKCBfdGVzdCAsIGxlbmd0aCAsIGhlYXBzICkge1xuXG5cdFx0ZXhoYXVzdCggbWFwKFxuXHRcdFx0ZnVuY3Rvb2xzLmNoYWluKCBbIGNoYWluICwgbGlzdCAsIGZ1bmN0b29scy5wYXJ0aWFsKCBmdW5jdG9vbHMuc3RhciAsIFsgbWV0aG9kIF0gKSBdICkgLFxuXHRcdFx0cHJvZHVjdCggW1xuXG5cdFx0XHRcdFtbX3Rlc3QsIGxlbmd0aF1dICxcblxuXHRcdFx0XHRoZWFwcyAsXG5cblx0XHRcdFx0W1xuXHRcdFx0XHRcdFtcImluY3JlYXNpbmdcIiwgaW5jcmVhc2luZ10sXG5cdFx0XHRcdFx0W1wiZGVjcmVhc2luZ1wiLCBkZWNyZWFzaW5nXVxuXHRcdFx0XHRdLFxuXG5cdFx0XHRcdFtbMV0sIFsxNl0sIFsxN10sIFszMV0sIFszMl0sIFszM10sIFs2M10sIFs2NF0sIFs2NV1dXG5cblx0XHRcdF0sIDEgKVxuXHRcdCkgKSA7XG5cblx0fSA7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0ZXN0ZXIyICggbWV0aG9kICkge1xuXG5cdHJldHVybiBmdW5jdGlvbiggX3Rlc3QgLCBsZW5ndGggLCBoZWFwcyApIHtcblxuXHRcdGV4aGF1c3QoIG1hcChcblx0XHRcdGZ1bmN0b29scy5jaGFpbiggWyBjaGFpbiAsIGxpc3QgLCBmdW5jdG9vbHMucGFydGlhbCggZnVuY3Rvb2xzLnN0YXIgLCBbIG1ldGhvZCBdICkgXSApICxcblx0XHRcdHByb2R1Y3QoIFtcblxuXHRcdFx0XHRbW190ZXN0LCBsZW5ndGhdXSAsXG5cblx0XHRcdFx0aGVhcHMgLFxuXG5cdFx0XHRcdFtcblx0XHRcdFx0XHRbXCJpbmNyZWFzaW5nXCIsIGluY3JlYXNpbmddLFxuXHRcdFx0XHRcdFtcImRlY3JlYXNpbmdcIiwgZGVjcmVhc2luZ11cblx0XHRcdFx0XSxcblxuXHRcdFx0XHRbWzFdLCBbMTZdLCBbMTddLCBbMzFdLCBbMzJdLCBbMzNdLCBbNjNdLCBbNjRdLCBbNjVdXSxcblx0XHRcdFx0W1sxXSwgWzE2XSwgWzE3XSwgWzMxXSwgWzMyXSwgWzMzXSwgWzYzXSwgWzY0XSwgWzY1XV1cblxuXHRcdFx0XSwgMSApXG5cdFx0KSApIDtcblxuXHR9IDtcbn1cbiJdfQ==